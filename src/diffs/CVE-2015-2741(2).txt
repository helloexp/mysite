# HG changeset patch
# User David Keeler <dkeeler@mozilla.com>
# Date 1429640517 25200
#      Tue Apr 21 11:21:57 2015 -0700
# Node ID 277477527ee5180fa3d00d4c970cc68b7714df27
# Parent  35742de4b8b668eb8919b0873e054e267993c897
bug 1147497 - Add API for querying site pin status. Disallow overrides for sites that have pins. r=mmc r=smaug r=cykesiopka r=past

diff --git a/docshell/base/nsDocShell.cpp b/docshell/base/nsDocShell.cpp
--- a/docshell/base/nsDocShell.cpp
+++ b/docshell/base/nsDocShell.cpp
@@ -4927,47 +4927,61 @@ nsDocShell::DisplayLoadError(nsresult aE
             if (nsserr) {
                 nsserr->GetErrorMessage(aError, messageStr);
             }
         }
         if (!messageStr.IsEmpty()) {
             if (errorClass == nsINSSErrorsService::ERROR_CLASS_BAD_CERT) {
                 error.AssignLiteral("nssBadCert");
 
-                // if this is a Strict-Transport-Security host and the cert
-                // is bad, don't allow overrides (STS Spec section 7.3).
-                uint32_t type = nsISiteSecurityService::HEADER_HSTS;
+                // If this is an HTTP Strict Transport Security host or a pinned
+                // host and the certificate is bad, don't allow overrides (RFC
+                // 6797 section 12.1, HPKP draft spec section 2.6).
                 uint32_t flags = mInPrivateBrowsing
                                  ? nsISocketProvider::NO_PERMANENT_STORAGE
                                  : 0;
                 bool isStsHost = false;
+                bool isPinnedHost = false;
                 if (XRE_GetProcessType() == GeckoProcessType_Default) {
                   nsCOMPtr<nsISiteSecurityService> sss =
                             do_GetService(NS_SSSERVICE_CONTRACTID, &rv);
                   NS_ENSURE_SUCCESS(rv, rv);
-                  rv = sss->IsSecureURI(type, aURI, flags, &isStsHost);
+                  rv = sss->IsSecureURI(nsISiteSecurityService::HEADER_HSTS,
+                                        aURI, flags, &isStsHost);
+                  NS_ENSURE_SUCCESS(rv, rv);
+                  rv = sss->IsSecureURI(nsISiteSecurityService::HEADER_HPKP,
+                                        aURI, flags, &isPinnedHost);
                   NS_ENSURE_SUCCESS(rv, rv);
                 } else {
                   mozilla::dom::ContentChild* cc =
                     mozilla::dom::ContentChild::GetSingleton();
                   mozilla::ipc::URIParams uri;
                   SerializeURI(aURI, uri);
-                  cc->SendIsSecureURI(type, uri, flags, &isStsHost);
+                  cc->SendIsSecureURI(nsISiteSecurityService::HEADER_HSTS, uri,
+                                      flags, &isStsHost);
+                  cc->SendIsSecureURI(nsISiteSecurityService::HEADER_HPKP, uri,
+                                      flags, &isPinnedHost);
                 }
 
                 if (Preferences::GetBool(
                         "browser.xul.error_pages.expert_bad_cert", false)) {
                     cssClass.AssignLiteral("expertBadCert");
                 }
 
-                // HSTS takes precedence over the expert bad cert pref. We
-                // never want to show the "Add Exception" button for HSTS sites.
+                // HSTS/pinning takes precedence over the expert bad cert pref.
+                // We never want to show the "Add Exception" button for these
+                // sites. In the future we should differentiate between an HSTS
+                // host and a pinned host and display a more informative message
+                // to the user.
+                if (isStsHost || isPinnedHost) {
+                  cssClass.AssignLiteral("badStsCert");
+                }
+
                 uint32_t bucketId;
                 if (isStsHost) {
-                  cssClass.AssignLiteral("badStsCert");
                   //measuring STS separately allows us to measure click through
                   //rates easily
                   bucketId = nsISecurityUITelemetry::WARNING_BAD_CERT_TOP_STS;
                 } else {
                   bucketId = nsISecurityUITelemetry::WARNING_BAD_CERT_TOP;
                 }
 
                 // See if an alternate cert error page is registered
diff --git a/security/certverifier/CertVerifier.cpp b/security/certverifier/CertVerifier.cpp
--- a/security/certverifier/CertVerifier.cpp
+++ b/security/certverifier/CertVerifier.cpp
@@ -109,22 +109,30 @@ CertListContainsExpectedKeys(const CERTC
   // If desired, the user can enable "allow user CA MITM mode", in which
   // case key pinning is not enforced for certificates that chain to trust
   // anchors that are not in Mozilla's root program
   if (!isBuiltInRoot && pinningMode == CertVerifier::pinningAllowUserCAMITM) {
     return Success;
   }
 
   bool enforceTestMode = (pinningMode == CertVerifier::pinningEnforceTestMode);
-  if (PublicKeyPinningService::ChainHasValidPins(certList, hostname, time,
-                                                 enforceTestMode)) {
-    return Success;
+  bool chainHasValidPins;
+  nsresult rv = PublicKeyPinningService::ChainHasValidPins(certList,
+                                                           hostname,
+                                                           time,
+                                                           enforceTestMode,
+                                                           chainHasValidPins);
+  if (NS_FAILED(rv)) {
+    return Result::FATAL_ERROR_LIBRARY_FAILURE;
+  }
+  if (!chainHasValidPins) {
+    return Result::ERROR_KEY_PINNING_FAILURE;
   }
 
-  return Result::ERROR_KEY_PINNING_FAILURE;
+  return Success;
 }
 
 static Result
 BuildCertChainForOneKeyUsage(NSSCertDBTrustDomain& trustDomain, Input certDER,
                              Time time, KeyUsage ku1, KeyUsage ku2,
                              KeyUsage ku3, KeyPurposeId eku,
                              const CertPolicyId& requiredPolicy,
                              const Input* stapledOCSPResponse,
@@ -401,37 +409,16 @@ CertVerifier::VerifyCert(CERTCertificate
       break;
     }
 
     default:
       rv = Result::FATAL_ERROR_INVALID_ARGS;
   }
 
   if (rv != Success) {
-    if (rv != Result::ERROR_KEY_PINNING_FAILURE &&
-        usage == certificateUsageSSLServer) {
-      ScopedCERTCertificate certCopy(CERT_DupCertificate(cert));
-      if (!certCopy) {
-        return SECFailure;
-      }
-      ScopedCERTCertList certList(CERT_NewCertList());
-      if (!certList) {
-        return SECFailure;
-      }
-      SECStatus srv = CERT_AddCertToListTail(certList.get(), certCopy.get());
-      if (srv != SECSuccess) {
-        return SECFailure;
-      }
-      certCopy.forget(); // now owned by certList
-      Result pinningResult = CertListContainsExpectedKeys(certList, hostname,
-                                                          time, mPinningMode);
-      if (pinningResult != Success) {
-        rv = pinningResult;
-      }
-    }
     PR_SetError(MapResultToPRErrorCode(rv), 0);
     return SECFailure;
   }
 
   return SECSuccess;
 }
 
 SECStatus
diff --git a/security/manager/boot/src/PublicKeyPinningService.cpp b/security/manager/boot/src/PublicKeyPinningService.cpp
--- a/security/manager/boot/src/PublicKeyPinningService.cpp
+++ b/security/manager/boot/src/PublicKeyPinningService.cpp
@@ -30,174 +30,194 @@ using namespace mozilla::psm;
 PRLogModuleInfo* gPublicKeyPinningLog =
   PR_NewLogModule("PublicKeyPinningService");
 #endif
 
 /**
  Computes in the location specified by base64Out the SHA256 digest
  of the DER Encoded subject Public Key Info for the given cert
 */
-static SECStatus
+static nsresult
 GetBase64HashSPKI(const CERTCertificate* cert, SECOidTag hashType,
                   nsACString& hashSPKIDigest)
 {
   hashSPKIDigest.Truncate();
   Digest digest;
   nsresult rv = digest.DigestBuf(hashType, cert->derPublicKey.data,
                                  cert->derPublicKey.len);
-  if (NS_WARN_IF(NS_FAILED(rv))) {
-    return SECFailure;
+  if (NS_FAILED(rv)) {
+    return rv;
   }
-  rv = Base64Encode(nsDependentCSubstring(
-                      reinterpret_cast<const char*>(digest.get().data),
-                      digest.get().len),
+  return Base64Encode(nsDependentCSubstring(
+                        reinterpret_cast<const char*>(digest.get().data),
+                        digest.get().len),
                       hashSPKIDigest);
-  if (NS_WARN_IF(NS_FAILED(rv))) {
-    return SECFailure;
-  }
-  return SECSuccess;
 }
 
 /*
  * Returns true if a given cert matches any hashType fingerprints from the
  * given pinset or the dynamicFingeprints array, false otherwise.
  */
-static bool
+static nsresult
 EvalCertWithHashType(const CERTCertificate* cert, SECOidTag hashType,
                      const StaticFingerprints* fingerprints,
-                     const nsTArray<nsCString>* dynamicFingerprints)
+                     const nsTArray<nsCString>* dynamicFingerprints,
+             /*out*/ bool& certMatchesPinset)
 {
+  certMatchesPinset = false;
   if (!fingerprints && !dynamicFingerprints) {
     PR_LOG(gPublicKeyPinningLog, PR_LOG_DEBUG,
            ("pkpin: No hashes found for hash type: %d\n", hashType));
-    return false;
+    return NS_ERROR_INVALID_ARG;
   }
 
   nsAutoCString base64Out;
-  SECStatus srv = GetBase64HashSPKI(cert, hashType, base64Out);
-  if (srv != SECSuccess) {
+  nsresult rv = GetBase64HashSPKI(cert, hashType, base64Out);
+  if (NS_FAILED(rv)) {
     PR_LOG(gPublicKeyPinningLog, PR_LOG_DEBUG,
            ("pkpin: GetBase64HashSPKI failed!\n"));
-    return false;
+    return rv;
   }
 
   if (fingerprints) {
     for (size_t i = 0; i < fingerprints->size; i++) {
       if (base64Out.Equals(fingerprints->data[i])) {
         PR_LOG(gPublicKeyPinningLog, PR_LOG_DEBUG,
                ("pkpin: found pin base_64 ='%s'\n", base64Out.get()));
-       return true;
+        certMatchesPinset = true;
+        return NS_OK;
       }
     }
   }
   if (dynamicFingerprints) {
     for (size_t i = 0; i < dynamicFingerprints->Length(); i++) {
       if (base64Out.Equals((*dynamicFingerprints)[i])) {
         PR_LOG(gPublicKeyPinningLog, PR_LOG_DEBUG,
                ("pkpin: found pin base_64 ='%s'\n", base64Out.get()));
-        return true;
+        certMatchesPinset = true;
+        return NS_OK;
       }
     }
   }
-  return false;
+  return NS_OK;
 }
 
 /*
  * Returns true if a given chain matches any hashType fingerprints from the
  * given pinset or the dynamicFingerprints array, false otherwise.
  */
-static bool
+static nsresult
 EvalChainWithHashType(const CERTCertList* certList, SECOidTag hashType,
                       const StaticPinset* pinset,
-                      const nsTArray<nsCString>* dynamicFingerprints)
+                      const nsTArray<nsCString>* dynamicFingerprints,
+              /*out*/ bool& certListIntersectsPinset)
 {
+  certListIntersectsPinset = false;
   CERTCertificate* currentCert;
 
   const StaticFingerprints* fingerprints = nullptr;
   if (pinset) {
     if (hashType == SEC_OID_SHA256) {
       fingerprints = pinset->sha256;
     } else if (hashType == SEC_OID_SHA1) {
       fingerprints = pinset->sha1;
     }
   }
+  // This can happen if dynamicFingerprints is null and the static pinset
+  // doesn't have any pins of this hash type.
   if (!fingerprints && !dynamicFingerprints) {
-    return false;
+    return NS_OK;
   }
 
   CERTCertListNode* node;
   for (node = CERT_LIST_HEAD(certList); !CERT_LIST_END(node, certList);
        node = CERT_LIST_NEXT(node)) {
     currentCert = node->cert;
     PR_LOG(gPublicKeyPinningLog, PR_LOG_DEBUG,
            ("pkpin: certArray subject: '%s'\n",
             currentCert->subjectName));
     PR_LOG(gPublicKeyPinningLog, PR_LOG_DEBUG,
            ("pkpin: certArray common_name: '%s'\n",
             CERT_GetCommonName(&(currentCert->issuer))));
-    if (EvalCertWithHashType(currentCert, hashType, fingerprints,
-                             dynamicFingerprints)) {
-      return true;
+    nsresult rv = EvalCertWithHashType(currentCert, hashType, fingerprints,
+                                       dynamicFingerprints,
+                                       certListIntersectsPinset);
+    if (NS_FAILED(rv)) {
+      return rv;
+    }
+    if (certListIntersectsPinset) {
+      return NS_OK;
     }
   }
   PR_LOG(gPublicKeyPinningLog, PR_LOG_DEBUG, ("pkpin: no matches found\n"));
-  return false;
+  return NS_OK;
 }
 
 /**
  * Given a pinset and certlist, return true if one of the certificates on
  * the list matches a fingerprint in the pinset, false otherwise.
  */
-static bool
+static nsresult
 EvalChainWithPinset(const CERTCertList* certList,
-                    const StaticPinset* pinset) {
+                    const StaticPinset* pinset,
+            /*out*/ bool& certListIntersectsPinset)
+{
+  certListIntersectsPinset = false;
   // SHA256 is more trustworthy, try that first.
-  if (EvalChainWithHashType(certList, SEC_OID_SHA256, pinset, nullptr)) {
-    return true;
+  nsresult rv = EvalChainWithHashType(certList, SEC_OID_SHA256, pinset,
+                                      nullptr, certListIntersectsPinset);
+  if (NS_FAILED(rv)) {
+    return rv;
   }
-  return EvalChainWithHashType(certList, SEC_OID_SHA1, pinset, nullptr);
+  if (certListIntersectsPinset) {
+    return NS_OK;
+  }
+  return EvalChainWithHashType(certList, SEC_OID_SHA1, pinset, nullptr,
+                               certListIntersectsPinset);
 }
 
 /**
   Comparator for the is public key pinned host.
 */
 static int
 TransportSecurityPreloadCompare(const void *key, const void *entry) {
   const char *keyStr = reinterpret_cast<const char *>(key);
   const TransportSecurityPreload *preloadEntry =
     reinterpret_cast<const TransportSecurityPreload *>(entry);
 
   return strcmp(keyStr, preloadEntry->mHost);
 }
 
-bool
+nsresult
 PublicKeyPinningService::ChainMatchesPinset(const CERTCertList* certList,
-                                            const nsTArray<nsCString>& aSHA256keys)
+                                            const nsTArray<nsCString>& aSHA256keys,
+                                    /*out*/ bool& chainMatchesPinset)
 {
-  return EvalChainWithHashType(certList, SEC_OID_SHA256, nullptr, &aSHA256keys);
+  return EvalChainWithHashType(certList, SEC_OID_SHA256, nullptr, &aSHA256keys,
+                               chainMatchesPinset);
 }
 
-/**
- * Check PKPins on the given certlist against the specified hostname
- */
-static bool
-CheckPinsForHostname(const CERTCertList *certList, const char *hostname,
-                     bool enforceTestMode, mozilla::pkix::Time time)
+// Returns via one of the output parameters the most relevant pinning
+// information that is valid for the given host at the given time.
+// Dynamic pins are prioritized over static pins.
+static nsresult
+FindPinningInformation(const char* hostname, mozilla::pkix::Time time,
+               /*out*/ nsTArray<nsCString>& dynamicFingerprints,
+               /*out*/ TransportSecurityPreload*& staticFingerprints)
 {
-  if (!certList) {
-    return false;
-  }
   if (!hostname || hostname[0] == 0) {
-    return false;
+    return NS_ERROR_INVALID_ARG;
   }
 
+  staticFingerprints = nullptr;
+  dynamicFingerprints.Clear();
   nsCOMPtr<nsISiteSecurityService> sssService =
     do_GetService(NS_SSSERVICE_CONTRACTID);
   if (!sssService) {
-    return false;
+    return NS_ERROR_FAILURE;
   }
   SiteHPKPState dynamicEntry;
   TransportSecurityPreload *foundEntry = nullptr;
   char *evalHost = const_cast<char*>(hostname);
   char *evalPart;
   // Notice how the (xx = strchr) prevents pins for unqualified domain names.
   while (!foundEntry && (evalPart = strchr(evalHost, '.'))) {
     PR_LOG(gPublicKeyPinningLog, PR_LOG_DEBUG,
@@ -205,23 +225,23 @@ CheckPinsForHostname(const CERTCertList 
     // Attempt dynamic pins first
     nsresult rv;
     bool found;
     bool includeSubdomains;
     nsTArray<nsCString> pinArray;
     rv = sssService->GetKeyPinsForHostname(evalHost, time, pinArray,
                                            &includeSubdomains, &found);
     if (NS_FAILED(rv)) {
-      return false;
+      return rv;
     }
     if (found && (evalHost == hostname || includeSubdomains)) {
       PR_LOG(gPublicKeyPinningLog, PR_LOG_DEBUG,
              ("pkpin: Found dyn match for host: '%s'\n", evalHost));
-      return EvalChainWithHashType(certList, SEC_OID_SHA256, nullptr,
-                                   &pinArray);
+      dynamicFingerprints = pinArray;
+      return NS_OK;
     }
 
     foundEntry = (TransportSecurityPreload *)bsearch(evalHost,
       kPublicKeyPinningPreloadList,
       sizeof(kPublicKeyPinningPreloadList) / sizeof(TransportSecurityPreload),
       sizeof(TransportSecurityPreload),
       TransportSecurityPreloadCompare);
     if (foundEntry) {
@@ -239,93 +259,137 @@ CheckPinsForHostname(const CERTCertList 
     }
     // Add one for '.'
     evalHost = evalPart + 1;
   }
 
   if (foundEntry && foundEntry->pinset) {
     if (time > TimeFromEpochInSeconds(kPreloadPKPinsExpirationTime /
                                       PR_USEC_PER_SEC)) {
-      return true;
+      return NS_OK;
     }
-    bool result = EvalChainWithPinset(certList, foundEntry->pinset);
-    bool retval = result;
-    Telemetry::ID histogram = foundEntry->mIsMoz
+    staticFingerprints = foundEntry;
+  }
+  return NS_OK;
+}
+
+// Returns true via the output parameter if the given certificate list meets
+// pinning requirements for the given host at the given time. It must be the
+// case that either there is an intersection between the set of hashes of
+// subject public key info data in the list and the most relevant non-expired
+// pinset for the host or there is no pinning information for the host.
+static nsresult
+CheckPinsForHostname(const CERTCertList* certList, const char* hostname,
+                     bool enforceTestMode, mozilla::pkix::Time time,
+             /*out*/ bool& chainHasValidPins)
+{
+  chainHasValidPins = false;
+  if (!certList) {
+    return NS_ERROR_INVALID_ARG;
+  }
+  if (!hostname || hostname[0] == 0) {
+    return NS_ERROR_INVALID_ARG;
+  }
+
+  nsTArray<nsCString> dynamicFingerprints;
+  TransportSecurityPreload* staticFingerprints = nullptr;
+  nsresult rv = FindPinningInformation(hostname, time, dynamicFingerprints,
+                                       staticFingerprints);
+  // If we have no pinning information, the certificate chain trivially
+  // validates with respect to pinning.
+  if (dynamicFingerprints.Length() == 0 && !staticFingerprints) {
+    chainHasValidPins = true;
+    return NS_OK;
+  }
+  if (dynamicFingerprints.Length() > 0) {
+    return EvalChainWithHashType(certList, SEC_OID_SHA256, nullptr,
+                                 &dynamicFingerprints, chainHasValidPins);
+  }
+  if (staticFingerprints) {
+    bool enforceTestModeResult;
+    rv = EvalChainWithPinset(certList, staticFingerprints->pinset,
+                             enforceTestModeResult);
+    if (NS_FAILED(rv)) {
+      return rv;
+    }
+    chainHasValidPins = enforceTestModeResult;
+    Telemetry::ID histogram = staticFingerprints->mIsMoz
       ? Telemetry::CERT_PINNING_MOZ_RESULTS
       : Telemetry::CERT_PINNING_RESULTS;
-    if (foundEntry->mTestMode) {
-      histogram = foundEntry->mIsMoz
+    if (staticFingerprints->mTestMode) {
+      histogram = staticFingerprints->mIsMoz
         ? Telemetry::CERT_PINNING_MOZ_TEST_RESULTS
         : Telemetry::CERT_PINNING_TEST_RESULTS;
       if (!enforceTestMode) {
-        retval = true;
+        chainHasValidPins = true;
       }
     }
     // We can collect per-host pinning violations for this host because it is
     // operationally critical to Firefox.
-    if (foundEntry->mId != kUnknownId) {
-      int32_t bucket = foundEntry->mId * 2 + (result ? 1 : 0);
-      histogram = foundEntry->mTestMode
+    if (staticFingerprints->mId != kUnknownId) {
+      int32_t bucket = staticFingerprints->mId * 2 + (enforceTestModeResult ? 1 : 0);
+      histogram = staticFingerprints->mTestMode
         ? Telemetry::CERT_PINNING_MOZ_TEST_RESULTS_BY_HOST
         : Telemetry::CERT_PINNING_MOZ_RESULTS_BY_HOST;
       Telemetry::Accumulate(histogram, bucket);
     } else {
-      Telemetry::Accumulate(histogram, result ? 1 : 0);
+      Telemetry::Accumulate(histogram, enforceTestModeResult ? 1 : 0);
     }
 
     // We only collect per-CA pinning statistics upon failures.
     CERTCertListNode* rootNode = CERT_LIST_TAIL(certList);
     // Only log telemetry if the certificate list is non-empty.
     if (!CERT_LIST_END(rootNode, certList)) {
-      if (!result) {
+      if (!enforceTestModeResult) {
         AccumulateTelemetryForRootCA(Telemetry::CERT_PINNING_FAILURES_BY_CA, rootNode->cert);
       }
     }
 
     PR_LOG(gPublicKeyPinningLog, PR_LOG_DEBUG,
            ("pkpin: Pin check %s for %s host '%s' (mode=%s)\n",
-            result ? "passed" : "failed",
-            foundEntry->mIsMoz ? "mozilla" : "non-mozilla",
-            hostname, foundEntry->mTestMode ? "test" : "production"));
-    return retval;
+            enforceTestModeResult ? "passed" : "failed",
+            staticFingerprints->mIsMoz ? "mozilla" : "non-mozilla",
+            hostname, staticFingerprints->mTestMode ? "test" : "production"));
   }
-  return true; // No pinning information for this hostname
+
+  return NS_OK;
 }
 
 /**
  * Extract all the DNS names for a host (including CN) and evaluate the
  * certifiate pins against all of them (Currently is an OR so we stop
  * evaluating at the first OK pin).
  */
-static bool
+static nsresult
 CheckChainAgainstAllNames(const CERTCertList* certList, bool enforceTestMode,
-                          mozilla::pkix::Time time)
+                          mozilla::pkix::Time time,
+                  /*out*/ bool& chainHasValidPins)
 {
+  chainHasValidPins = false;
   PR_LOG(gPublicKeyPinningLog, PR_LOG_DEBUG,
          ("pkpin: top of checkChainAgainstAllNames"));
   CERTCertListNode* node = CERT_LIST_HEAD(certList);
   if (!node) {
-    return false;
+    return NS_ERROR_INVALID_ARG;
   }
   CERTCertificate* cert = node->cert;
   if (!cert) {
-    return false;
+    return NS_ERROR_INVALID_ARG;
   }
 
   ScopedPLArenaPool arena(PORT_NewArena(DER_DEFAULT_CHUNKSIZE));
   if (!arena) {
-    return false;
+    return NS_ERROR_FAILURE;
   }
 
-  bool hasValidPins = false;
   CERTGeneralName* nameList;
   CERTGeneralName* currentName;
   nameList = CERT_GetConstrainedCertificateNames(cert, arena.get(), PR_TRUE);
   if (!nameList) {
-    return false;
+    return NS_ERROR_FAILURE;
   }
 
   currentName = nameList;
   do {
     if (currentName->type == certDNSName
         && currentName->name.other.data[0] != 0) {
       // no need to cleaup, as the arena cleanup will do
       char *hostName = (char *)PORT_ArenaAlloc(arena.get(),
@@ -337,42 +401,75 @@ CheckChainAgainstAllNames(const CERTCert
       // null terminated.
       hostName[currentName->name.other.len] = 0;
       memcpy(hostName, currentName->name.other.data,
              currentName->name.other.len);
       if (!hostName[0]) {
         // cannot call CheckPinsForHostname on empty or null hostname
         break;
       }
-      if (CheckPinsForHostname(certList, hostName, enforceTestMode, time)) {
-        hasValidPins = true;
-        break;
+      nsAutoCString canonicalizedHostname(
+        PublicKeyPinningService::CanonicalizeHostname(hostName));
+      nsresult rv = CheckPinsForHostname(certList, canonicalizedHostname.get(),
+                                         enforceTestMode, time,
+                                         chainHasValidPins);
+      if (NS_FAILED(rv)) {
+        return rv;
+      }
+      if (chainHasValidPins) {
+        return NS_OK;
       }
     }
     currentName = CERT_GetNextGeneralName(currentName);
   } while (currentName != nameList);
 
-  return hasValidPins;
+  return NS_OK;
 }
 
-bool
+nsresult
 PublicKeyPinningService::ChainHasValidPins(const CERTCertList* certList,
                                            const char* hostname,
                                            mozilla::pkix::Time time,
-                                           bool enforceTestMode)
+                                           bool enforceTestMode,
+                                   /*out*/ bool& chainHasValidPins)
 {
+  chainHasValidPins = false;
   if (!certList) {
-    return false;
+    return NS_ERROR_INVALID_ARG;
   }
   if (!hostname || hostname[0] == 0) {
-    return CheckChainAgainstAllNames(certList, enforceTestMode, time);
+    return CheckChainAgainstAllNames(certList, enforceTestMode, time,
+                                     chainHasValidPins);
   }
   nsAutoCString canonicalizedHostname(CanonicalizeHostname(hostname));
   return CheckPinsForHostname(certList, canonicalizedHostname.get(),
-                              enforceTestMode, time);
+                              enforceTestMode, time, chainHasValidPins);
+}
+
+nsresult
+PublicKeyPinningService::HostHasPins(const char* hostname,
+                                     mozilla::pkix::Time time,
+                                     bool enforceTestMode,
+                                     /*out*/ bool& hostHasPins)
+{
+  hostHasPins = false;
+  nsAutoCString canonicalizedHostname(CanonicalizeHostname(hostname));
+  nsTArray<nsCString> dynamicFingerprints;
+  TransportSecurityPreload* staticFingerprints = nullptr;
+  nsresult rv = FindPinningInformation(canonicalizedHostname.get(), time,
+                                       dynamicFingerprints, staticFingerprints);
+  if (NS_FAILED(rv)) {
+    return rv;
+  }
+  if (dynamicFingerprints.Length() > 0) {
+    hostHasPins = true;
+  } else if (staticFingerprints) {
+    hostHasPins = !staticFingerprints->mTestMode || enforceTestMode;
+  }
+  return NS_OK;
 }
 
 nsAutoCString
 PublicKeyPinningService::CanonicalizeHostname(const char* hostname)
 {
   nsAutoCString canonicalizedHostname(hostname);
   ToLowerCase(canonicalizedHostname);
   while (canonicalizedHostname.Length() > 0 &&
diff --git a/security/manager/boot/src/PublicKeyPinningService.h b/security/manager/boot/src/PublicKeyPinningService.h
--- a/security/manager/boot/src/PublicKeyPinningService.h
+++ b/security/manager/boot/src/PublicKeyPinningService.h
@@ -22,27 +22,39 @@ public:
    * the given certificate chain matches the pin set specified by the
    * hostname. If the hostname is null or empty evaluate against all the
    * possible names for the EE cert (Common Name (CN) plus all DNS Name:
    * subject Alt Name entries). The certList's head is the EE cert and the
    * tail is the trust anchor.
    * Note: if an alt name is a wildcard, it won't necessarily find a pinset
    * that would otherwise be valid for it
    */
-  static bool ChainHasValidPins(const CERTCertList* certList,
-                                const char* hostname,
-                                mozilla::pkix::Time time,
-                                bool enforceTestMode);
+  static nsresult ChainHasValidPins(const CERTCertList* certList,
+                                    const char* hostname,
+                                    mozilla::pkix::Time time,
+                                    bool enforceTestMode,
+                            /*out*/ bool& chainHasValidPins);
   /**
    * Returns true if there is any intersection between the certificate list
    * and the pins specified in the aSHA256key array. Values passed in are
    * assumed to be in base64 encoded form
    */
-  static bool ChainMatchesPinset(const CERTCertList* certList,
-                                 const nsTArray<nsCString>& aSHA256keys);
+  static nsresult ChainMatchesPinset(const CERTCertList* certList,
+                                     const nsTArray<nsCString>& aSHA256keys,
+                             /*out*/ bool& chainMatchesPinset);
+
+  /**
+   * Returns true via the output parameter hostHasPins if there is pinning
+   * information for the given host that is valid at the given time, and false
+   * otherwise.
+   */
+  static nsresult HostHasPins(const char* hostname,
+                              mozilla::pkix::Time time,
+                              bool enforceTestMode,
+                      /*out*/ bool& hostHasPins);
 
   /**
    * Given a hostname of potentially mixed case with potentially multiple
    * trailing '.' (see bug 1118522), canonicalizes it to lowercase with no
    * trailing '.'.
    */
   static nsAutoCString CanonicalizeHostname(const char* hostname);
 };
diff --git a/security/manager/boot/src/nsSiteSecurityService.cpp b/security/manager/boot/src/nsSiteSecurityService.cpp
--- a/security/manager/boot/src/nsSiteSecurityService.cpp
+++ b/security/manager/boot/src/nsSiteSecurityService.cpp
@@ -699,31 +699,41 @@ nsSiteSecurityService::ProcessPKPHeader(
     return NS_OK;
   }
 
   // if maxAge == 0 we must delete all state, for now no hole-punching
   if (maxAge == 0) {
     return RemoveState(aType, aSourceURI, aFlags);
   }
 
-  if (!PublicKeyPinningService::ChainMatchesPinset(certList, sha256keys)) {
+  bool chainMatchesPinset;
+  rv = PublicKeyPinningService::ChainMatchesPinset(certList, sha256keys,
+                                                   chainMatchesPinset);
+  if (NS_FAILED(rv)) {
+    return rv;
+  }
+  if (!chainMatchesPinset) {
     // is invalid
     SSSLOG(("SSS: Pins provided by %s are invalid no match with certList\n", host.get()));
     return NS_ERROR_FAILURE;
   }
 
   // finally we need to ensure that there is a "backup pin" ie. There must be
   // at least one fingerprint hash that does NOT valiate against the verified
   // chain (Section 2.5 of the spec)
   bool hasBackupPin = false;
   for (uint32_t i = 0; i < sha256keys.Length(); i++) {
     nsTArray<nsCString> singlePin;
     singlePin.AppendElement(sha256keys[i]);
-    if (!PublicKeyPinningService::
-           ChainMatchesPinset(certList, singlePin)) {
+    rv = PublicKeyPinningService::ChainMatchesPinset(certList, singlePin,
+                                                     chainMatchesPinset);
+    if (NS_FAILED(rv)) {
+      return rv;
+    }
+    if (!chainMatchesPinset) {
       hasBackupPin = true;
     }
   }
   if (!hasBackupPin) {
      // is invalid
     SSSLOG(("SSS: Pins provided by %s are invalid no backupPin\n", host.get()));
     return NS_ERROR_FAILURE;
   }
@@ -793,18 +803,22 @@ nsSiteSecurityService::ProcessSTSHeader(
            ? NS_SUCCESS_LOSS_OF_INSIGNIFICANT_DATA
            : NS_OK;
 }
 
 NS_IMETHODIMP
 nsSiteSecurityService::IsSecureURI(uint32_t aType, nsIURI* aURI,
                                    uint32_t aFlags, bool* aResult)
 {
-  // Only HSTS is supported at the moment.
-  NS_ENSURE_TRUE(aType == nsISiteSecurityService::HEADER_HSTS,
+  NS_ENSURE_ARG(aURI);
+  NS_ENSURE_ARG(aResult);
+
+  // Only HSTS and HPKP are supported at the moment.
+  NS_ENSURE_TRUE(aType == nsISiteSecurityService::HEADER_HSTS ||
+                 aType == nsISiteSecurityService::HEADER_HPKP,
                  NS_ERROR_NOT_IMPLEMENTED);
 
   nsAutoCString hostname;
   nsresult rv = GetHost(aURI, hostname);
   NS_ENSURE_SUCCESS(rv, rv);
   /* An IP address never qualifies as a secure URI. */
   if (HostIsIPAddress(hostname.get())) {
     *aResult = false;
@@ -838,41 +852,45 @@ nsSiteSecurityService::GetPreloadListEnt
 
   return nullptr;
 }
 
 NS_IMETHODIMP
 nsSiteSecurityService::IsSecureHost(uint32_t aType, const char* aHost,
                                     uint32_t aFlags, bool* aResult)
 {
+  NS_ENSURE_ARG(aHost);
+  NS_ENSURE_ARG(aResult);
+
   // Only HSTS and HPKP are supported at the moment.
   NS_ENSURE_TRUE(aType == nsISiteSecurityService::HEADER_HSTS ||
                  aType == nsISiteSecurityService::HEADER_HPKP,
                  NS_ERROR_NOT_IMPLEMENTED);
 
   // set default in case if we can't find any STS information
   *aResult = false;
 
   /* An IP address never qualifies as a secure URI. */
   if (HostIsIPAddress(aHost)) {
     return NS_OK;
   }
 
   if (aType == nsISiteSecurityService::HEADER_HPKP) {
-    ScopedCERTCertList certList(CERT_NewCertList());
-    if (!certList) {
+    RefPtr<SharedCertVerifier> certVerifier(GetDefaultCertVerifier());
+    if (!certVerifier) {
       return NS_ERROR_FAILURE;
     }
-    // Todo: we need to update ChainHasValidPins to distinguish between there
-    // are no pins or there was an internal failure.
-    *aResult = !PublicKeyPinningService::ChainHasValidPins(certList,
-                                                           aHost,
-                                                           mozilla::pkix::Now(),
-                                                           false);
-    return NS_OK;
+    if (certVerifier->mPinningMode ==
+        CertVerifier::PinningMode::pinningDisabled) {
+      return NS_OK;
+    }
+    bool enforceTestMode = certVerifier->mPinningMode ==
+                           CertVerifier::PinningMode::pinningEnforceTestMode;
+    return PublicKeyPinningService::HostHasPins(aHost, mozilla::pkix::Now(),
+                                                enforceTestMode, *aResult);
   }
 
   // Holepunch chart.apis.google.com and subdomains.
   nsAutoCString host(PublicKeyPinningService::CanonicalizeHostname(aHost));
   if (host.EqualsLiteral("chart.apis.google.com") ||
       StringEndsWith(host, NS_LITERAL_CSTRING(".chart.apis.google.com"))) {
     return NS_OK;
   }
diff --git a/security/manager/ssl/src/SSLServerCertVerification.cpp b/security/manager/ssl/src/SSLServerCertVerification.cpp
--- a/security/manager/ssl/src/SSLServerCertVerification.cpp
+++ b/security/manager/ssl/src/SSLServerCertVerification.cpp
@@ -434,36 +434,55 @@ CertErrorRunnable::CheckCertOverrides()
   mInfoObject->GetPort(&port);
 
   nsAutoCString hostWithPortString(mInfoObject->GetHostName());
   hostWithPortString.Append(':');
   hostWithPortString.AppendInt(port);
 
   uint32_t remaining_display_errors = mCollectedErrors;
 
-  nsresult nsrv;
 
-  // Enforce Strict-Transport-Security for hosts that are "STS" hosts:
-  // connections must be dropped when there are any certificate errors
-  // (STS Spec section 7.3).
+  // If this is an HTTP Strict Transport Security host or a pinned host and the
+  // certificate is bad, don't allow overrides (RFC 6797 section 12.1,
+  // HPKP draft spec section 2.6).
   bool strictTransportSecurityEnabled = false;
-  nsCOMPtr<nsISiteSecurityService> sss
-    = do_GetService(NS_SSSERVICE_CONTRACTID, &nsrv);
-  if (NS_SUCCEEDED(nsrv)) {
-    nsrv = sss->IsSecureHost(nsISiteSecurityService::HEADER_HSTS,
-                             mInfoObject->GetHostNameRaw(),
-                             mProviderFlags,
-                             &strictTransportSecurityEnabled);
+  bool hasPinningInformation = false;
+  nsCOMPtr<nsISiteSecurityService> sss(do_GetService(NS_SSSERVICE_CONTRACTID));
+  if (!sss) {
+    PR_LOG(gPIPNSSLog, PR_LOG_DEBUG,
+           ("[%p][%p] couldn't get nsISiteSecurityService to check for HSTS/HPKP\n",
+            mFdForLogging, this));
+    return new SSLServerCertVerificationResult(mInfoObject,
+                                               mDefaultErrorCodeToReport);
   }
+  nsresult nsrv = sss->IsSecureHost(nsISiteSecurityService::HEADER_HSTS,
+                                    mInfoObject->GetHostNameRaw(),
+                                    mProviderFlags,
+                                    &strictTransportSecurityEnabled);
   if (NS_FAILED(nsrv)) {
+    PR_LOG(gPIPNSSLog, PR_LOG_DEBUG,
+           ("[%p][%p] checking for HSTS failed\n", mFdForLogging, this));
+    return new SSLServerCertVerificationResult(mInfoObject,
+                                               mDefaultErrorCodeToReport);
+  }
+  nsrv = sss->IsSecureHost(nsISiteSecurityService::HEADER_HPKP,
+                           mInfoObject->GetHostNameRaw(),
+                           mProviderFlags,
+                           &hasPinningInformation);
+  if (NS_FAILED(nsrv)) {
+    PR_LOG(gPIPNSSLog, PR_LOG_DEBUG,
+           ("[%p][%p] checking for HPKP failed\n", mFdForLogging, this));
     return new SSLServerCertVerificationResult(mInfoObject,
                                                mDefaultErrorCodeToReport);
   }
 
-  if (!strictTransportSecurityEnabled) {
+  if (!strictTransportSecurityEnabled && !hasPinningInformation) {
+    PR_LOG(gPIPNSSLog, PR_LOG_DEBUG,
+           ("[%p][%p] no HSTS or HPKP - overrides allowed\n",
+            mFdForLogging, this));
     nsCOMPtr<nsICertOverrideService> overrideService =
       do_GetService(NS_CERTOVERRIDE_CONTRACTID);
     // it is fine to continue without the nsICertOverrideService
 
     uint32_t overrideBits = 0;
 
     if (overrideService)
     {
@@ -502,18 +521,18 @@ CertErrorRunnable::CheckCertOverrides()
       // all errors are covered by override rules, so let's accept the cert
       PR_LOG(gPIPNSSLog, PR_LOG_DEBUG,
              ("[%p][%p] All errors covered by override rules\n",
              mFdForLogging, this));
       return new SSLServerCertVerificationResult(mInfoObject, 0);
     }
   } else {
     PR_LOG(gPIPNSSLog, PR_LOG_DEBUG,
-           ("[%p][%p] Strict-Transport-Security is violated: untrusted "
-            "transport layer\n", mFdForLogging, this));
+           ("[%p][%p] HSTS or HPKP - no overrides allowed\n",
+            mFdForLogging, this));
   }
 
   PR_LOG(gPIPNSSLog, PR_LOG_DEBUG,
          ("[%p][%p] Certificate error was not overridden\n",
          mFdForLogging, this));
 
   // Ok, this is a full stop.
   // First, deliver the technical details of the broken SSL status.
diff --git a/security/manager/ssl/tests/unit/head_psm.js b/security/manager/ssl/tests/unit/head_psm.js
--- a/security/manager/ssl/tests/unit/head_psm.js
+++ b/security/manager/ssl/tests/unit/head_psm.js
@@ -550,8 +550,50 @@ FakeSSLStatus.prototype = {
   QueryInterface: function(aIID) {
     if (aIID.equals(Ci.nsISSLStatus) ||
         aIID.equals(Ci.nsISupports)) {
       return this;
     }
     throw Components.results.NS_ERROR_NO_INTERFACE;
   },
 }
+
+// Utility functions for adding tests relating to certificate error overrides
+
+// Helper function for add_cert_override_test and
+// add_prevented_cert_override_test. Probably doesn't need to be called
+// directly.
+function add_cert_override(aHost, aExpectedBits, aSecurityInfo) {
+  let sslstatus = aSecurityInfo.QueryInterface(Ci.nsISSLStatusProvider)
+                               .SSLStatus;
+  let bits =
+    (sslstatus.isUntrusted ? Ci.nsICertOverrideService.ERROR_UNTRUSTED : 0) |
+    (sslstatus.isDomainMismatch ? Ci.nsICertOverrideService.ERROR_MISMATCH : 0) |
+    (sslstatus.isNotValidAtThisTime ? Ci.nsICertOverrideService.ERROR_TIME : 0);
+  do_check_eq(bits, aExpectedBits);
+  let cert = sslstatus.serverCert;
+  let certOverrideService = Cc["@mozilla.org/security/certoverride;1"]
+                              .getService(Ci.nsICertOverrideService);
+  certOverrideService.rememberValidityOverride(aHost, 8443, cert, aExpectedBits,
+                                               true);
+}
+
+// Given a host, expected error bits (see nsICertOverrideService.idl), and
+// an expected error code, tests that an initial connection to the host fails
+// with the expected errors and that adding an override results in a subsequent
+// connection succeeding.
+function add_cert_override_test(aHost, aExpectedBits, aExpectedError) {
+  add_connection_test(aHost, aExpectedError, null,
+                      add_cert_override.bind(this, aHost, aExpectedBits));
+  add_connection_test(aHost, Cr.NS_OK);
+}
+
+// Given a host, expected error bits (see nsICertOverrideService.idl), and
+// an expected error code, tests that an initial connection to the host fails
+// with the expected errors and that adding an override does not result in a
+// subsequent connection succeeding (i.e. the same error code is encountered).
+// The idea here is that for HSTS hosts or hosts with key pins, no error is
+// overridable, even if an entry is added to the override service.
+function add_prevented_cert_override_test(aHost, aExpectedBits, aExpectedError) {
+  add_connection_test(aHost, aExpectedError, null,
+                      add_cert_override.bind(this, aHost, aExpectedBits));
+  add_connection_test(aHost, aExpectedError);
+}
diff --git a/security/manager/ssl/tests/unit/test_cert_overrides.js b/security/manager/ssl/tests/unit/test_cert_overrides.js
--- a/security/manager/ssl/tests/unit/test_cert_overrides.js
+++ b/security/manager/ssl/tests/unit/test_cert_overrides.js
@@ -7,37 +7,16 @@
 // Tests the certificate overrides we allow.
 // add_cert_override_test will queue a test that does the following:
 // 1. Attempt to connect to the given host. This should fail with the
 //    given error and override bits.
 // 2. Add an override for that host/port/certificate/override bits.
 // 3. Connect again. This should succeed.
 
 do_get_profile();
-let certOverrideService = Cc["@mozilla.org/security/certoverride;1"]
-                            .getService(Ci.nsICertOverrideService);
-
-function add_cert_override(aHost, aExpectedBits, aSecurityInfo) {
-  let sslstatus = aSecurityInfo.QueryInterface(Ci.nsISSLStatusProvider)
-                               .SSLStatus;
-  let bits =
-    (sslstatus.isUntrusted ? Ci.nsICertOverrideService.ERROR_UNTRUSTED : 0) |
-    (sslstatus.isDomainMismatch ? Ci.nsICertOverrideService.ERROR_MISMATCH : 0) |
-    (sslstatus.isNotValidAtThisTime ? Ci.nsICertOverrideService.ERROR_TIME : 0);
-  do_check_eq(bits, aExpectedBits);
-  let cert = sslstatus.serverCert;
-  certOverrideService.rememberValidityOverride(aHost, 8443, cert, aExpectedBits,
-                                               true);
-}
-
-function add_cert_override_test(aHost, aExpectedBits, aExpectedError) {
-  add_connection_test(aHost, aExpectedError, null,
-                      add_cert_override.bind(this, aHost, aExpectedBits));
-  add_connection_test(aHost, Cr.NS_OK);
-}
 
 function add_non_overridable_test(aHost, aExpectedError) {
   add_connection_test(
     aHost, getXPCOMStatusFromNSS(aExpectedError), null,
     function (securityInfo) {
       // bug 754369 - no SSLStatus probably means this is a non-overridable
       // error, which is what we're testing (although it would be best to test
       // this directly).
@@ -131,16 +110,18 @@ function add_simple_tests() {
 
   // If an X.509 version 1 certificate is not a trust anchor, we will
   // encounter an overridable error.
   add_cert_override_test("end-entity-issued-by-v1-cert.example.com",
                          Ci.nsICertOverrideService.ERROR_UNTRUSTED,
                          getXPCOMStatusFromNSS(MOZILLA_PKIX_ERROR_V1_CERT_USED_AS_CA));
   // If we make that certificate a trust anchor, the connection will succeed.
   add_test(function() {
+    let certOverrideService = Cc["@mozilla.org/security/certoverride;1"]
+                                .getService(Ci.nsICertOverrideService);
     certOverrideService.clearValidityOverride("end-entity-issued-by-v1-cert.example.com", 8443);
     let v1Cert = constructCertFromFile("tlsserver/v1Cert.der");
     setCertTrust(v1Cert, "CTu,,");
     clearSessionCache();
     run_next_test();
   });
   add_connection_test("end-entity-issued-by-v1-cert.example.com", Cr.NS_OK);
   // Reset the trust for that certificate.
diff --git a/security/manager/ssl/tests/unit/test_pinning.js b/security/manager/ssl/tests/unit/test_pinning.js
--- a/security/manager/ssl/tests/unit/test_pinning.js
+++ b/security/manager/ssl/tests/unit/test_pinning.js
@@ -23,30 +23,41 @@
 // - PASS: sub.exclude-subdomains.pinning.example.com serves an incorrect cert
 
 "use strict";
 
 do_get_profile(); // must be called before getting nsIX509CertDB
 const certdb = Cc["@mozilla.org/security/x509certdb;1"]
                   .getService(Ci.nsIX509CertDB);
 
+function add_clear_override(host) {
+  add_test(function() {
+    let certOverrideService = Cc["@mozilla.org/security/certoverride;1"]
+                                .getService(Ci.nsICertOverrideService);
+    certOverrideService.clearValidityOverride(host, 8443);
+    run_next_test();
+  });
+}
+
 function test_strict() {
   // In strict mode, we always evaluate pinning data, regardless of whether the
   // issuer is a built-in trust anchor. We only enforce pins that are not in
   // test mode.
   add_test(function() {
     Services.prefs.setIntPref("security.cert_pinning.enforcement_level", 2);
     run_next_test();
   });
 
-  // If a host should be pinned but other errors (particularly overridable
-  // errors) like 'unknown issuer' are encountered, the pinning error takes
-  // precedence. This prevents overrides for such hosts.
-  add_connection_test("unknownissuer.include-subdomains.pinning.example.com",
-    getXPCOMStatusFromNSS(MOZILLA_PKIX_ERROR_KEY_PINNING_FAILURE));
+  // Normally this is overridable. But, since we have pinning information for
+  // this host, we don't allow overrides.
+  add_prevented_cert_override_test(
+    "unknownissuer.include-subdomains.pinning.example.com",
+    Ci.nsICertOverrideService.ERROR_UNTRUSTED,
+    getXPCOMStatusFromNSS(SEC_ERROR_UNKNOWN_ISSUER));
+  add_clear_override("unknownissuer.include-subdomains.pinning.example.com");
 
   // Issued by otherCA, which is not in the pinset for pinning.example.com.
   add_connection_test("bad.include-subdomains.pinning.example.com",
     getXPCOMStatusFromNSS(MOZILLA_PKIX_ERROR_KEY_PINNING_FAILURE));
 
   // Check that using a FQDN doesn't bypass pinning.
   add_connection_test("bad.include-subdomains.pinning.example.com.",
     getXPCOMStatusFromNSS(MOZILLA_PKIX_ERROR_KEY_PINNING_FAILURE));
@@ -63,68 +74,96 @@ function test_strict() {
   // are excluded.
   add_connection_test("sub.exclude-subdomains.pinning.example.com", Cr.NS_OK);
 
   // This domain's pinset is exactly the same as
   // include-subdomains.pinning.example.com, serves the same cert as
   // bad.include-subdomains.pinning.example.com, but it should pass because
   // it's in test_mode.
   add_connection_test("test-mode.pinning.example.com", Cr.NS_OK);
+
+  // Similarly, this pin is in test-mode, so it should be overridable.
+  add_cert_override_test("unknownissuer.test-mode.pinning.example.com",
+                         Ci.nsICertOverrideService.ERROR_UNTRUSTED,
+                         getXPCOMStatusFromNSS(SEC_ERROR_UNKNOWN_ISSUER));
+  add_clear_override("unknownissuer.test-mode.pinning.example.com");
 }
 
 function test_mitm() {
   // In MITM mode, we allow pinning to pass if the chain resolves to any
   // user-specified trust anchor, even if it is not in the pinset.
   add_test(function() {
     Services.prefs.setIntPref("security.cert_pinning.enforcement_level", 1);
     run_next_test();
   });
 
   add_connection_test("include-subdomains.pinning.example.com", Cr.NS_OK);
   add_connection_test("good.include-subdomains.pinning.example.com", Cr.NS_OK);
 
-  add_connection_test("unknownissuer.include-subdomains.pinning.example.com",
+  // Normally this is overridable. But, since we have pinning information for
+  // this host, we don't allow overrides (since building a trusted chain fails,
+  // we have no reason to believe this was issued by a user-added trust
+  // anchor, so we can't allow overrides for it).
+  add_prevented_cert_override_test(
+    "unknownissuer.include-subdomains.pinning.example.com",
+    Ci.nsICertOverrideService.ERROR_UNTRUSTED,
     getXPCOMStatusFromNSS(SEC_ERROR_UNKNOWN_ISSUER));
+  add_clear_override("unknownissuer.include-subdomains.pinning.example.com");
 
   // In this case, even though otherCA is not in the pinset, it is a
   // user-specified trust anchor and the pinning check succeeds.
   add_connection_test("bad.include-subdomains.pinning.example.com", Cr.NS_OK);
 
   add_connection_test("exclude-subdomains.pinning.example.com", Cr.NS_OK);
   add_connection_test("sub.exclude-subdomains.pinning.example.com", Cr.NS_OK);
   add_connection_test("test-mode.pinning.example.com", Cr.NS_OK);
+  add_cert_override_test("unknownissuer.test-mode.pinning.example.com",
+                         Ci.nsICertOverrideService.ERROR_UNTRUSTED,
+                         getXPCOMStatusFromNSS(SEC_ERROR_UNKNOWN_ISSUER));
+  add_clear_override("unknownissuer.test-mode.pinning.example.com");
 };
 
 function test_disabled() {
   // Disable pinning.
   add_test(function() {
     Services.prefs.setIntPref("security.cert_pinning.enforcement_level", 0);
     run_next_test();
   });
 
   add_connection_test("include-subdomains.pinning.example.com", Cr.NS_OK);
   add_connection_test("good.include-subdomains.pinning.example.com", Cr.NS_OK);
   add_connection_test("bad.include-subdomains.pinning.example.com", Cr.NS_OK);
   add_connection_test("exclude-subdomains.pinning.example.com", Cr.NS_OK);
   add_connection_test("sub.exclude-subdomains.pinning.example.com", Cr.NS_OK);
   add_connection_test("test-mode.pinning.example.com", Cr.NS_OK);
 
-  add_connection_test("unknownissuer.include-subdomains.pinning.example.com",
-    getXPCOMStatusFromNSS(SEC_ERROR_UNKNOWN_ISSUER));
+  add_cert_override_test("unknownissuer.include-subdomains.pinning.example.com",
+                         Ci.nsICertOverrideService.ERROR_UNTRUSTED,
+                         getXPCOMStatusFromNSS(SEC_ERROR_UNKNOWN_ISSUER));
+  add_clear_override("unknownissuer.include-subdomains.pinning.example.com");
+  add_cert_override_test("unknownissuer.test-mode.pinning.example.com",
+                         Ci.nsICertOverrideService.ERROR_UNTRUSTED,
+                         getXPCOMStatusFromNSS(SEC_ERROR_UNKNOWN_ISSUER));
+  add_clear_override("unknownissuer.test-mode.pinning.example.com");
 }
 
 function test_enforce_test_mode() {
   // In enforce test mode, we always enforce all pins, even test pins.
   add_test(function() {
     Services.prefs.setIntPref("security.cert_pinning.enforcement_level", 3);
     run_next_test();
   });
 
-  add_connection_test("unknownissuer.include-subdomains.pinning.example.com",
-    getXPCOMStatusFromNSS(MOZILLA_PKIX_ERROR_KEY_PINNING_FAILURE));
+  // Normally this is overridable. But, since we have pinning information for
+  // this host, we don't allow overrides.
+  add_prevented_cert_override_test(
+    "unknownissuer.include-subdomains.pinning.example.com",
+    Ci.nsICertOverrideService.ERROR_UNTRUSTED,
+    getXPCOMStatusFromNSS(SEC_ERROR_UNKNOWN_ISSUER));
+  add_clear_override("unknownissuer.include-subdomains.pinning.example.com");
 
   // Issued by otherCA, which is not in the pinset for pinning.example.com.
   add_connection_test("bad.include-subdomains.pinning.example.com",
     getXPCOMStatusFromNSS(MOZILLA_PKIX_ERROR_KEY_PINNING_FAILURE));
 
   // These domains serve certs that match the pinset.
   add_connection_test("include-subdomains.pinning.example.com", Cr.NS_OK);
   add_connection_test("good.include-subdomains.pinning.example.com", Cr.NS_OK);
@@ -135,27 +174,34 @@ function test_enforce_test_mode() {
   add_connection_test("sub.exclude-subdomains.pinning.example.com", Cr.NS_OK);
 
   // This domain's pinset is exactly the same as
   // include-subdomains.pinning.example.com, serves the same cert as
   // bad.include-subdomains.pinning.example.com, is in test-mode, but we are
   // enforcing test mode pins.
   add_connection_test("test-mode.pinning.example.com",
     getXPCOMStatusFromNSS(MOZILLA_PKIX_ERROR_KEY_PINNING_FAILURE));
+  // Normally this is overridable. But, since we have pinning information for
+  // this host (and since we're enforcing test mode), we don't allow overrides.
+  add_prevented_cert_override_test(
+    "unknownissuer.test-mode.pinning.example.com",
+    Ci.nsICertOverrideService.ERROR_UNTRUSTED,
+    getXPCOMStatusFromNSS(SEC_ERROR_UNKNOWN_ISSUER));
+  add_clear_override("unknownissuer.test-mode.pinning.example.com");
 }
 
 function check_pinning_telemetry() {
   let service = Cc["@mozilla.org/base/telemetry;1"].getService(Ci.nsITelemetry);
   let prod_histogram = service.getHistogramById("CERT_PINNING_RESULTS")
                          .snapshot();
   let test_histogram = service.getHistogramById("CERT_PINNING_TEST_RESULTS")
                          .snapshot();
   // Because all of our test domains are pinned to user-specified trust
   // anchors, effectively only strict mode and enforce test-mode get evaluated
-  do_check_eq(prod_histogram.counts[0], 6); // Failure count
+  do_check_eq(prod_histogram.counts[0], 4); // Failure count
   do_check_eq(prod_histogram.counts[1], 4); // Success count
   do_check_eq(test_histogram.counts[0], 2); // Failure count
   do_check_eq(test_histogram.counts[1], 0); // Success count
 
   let moz_prod_histogram = service.getHistogramById("CERT_PINNING_MOZ_RESULTS")
                              .snapshot();
   let moz_test_histogram =
     service.getHistogramById("CERT_PINNING_MOZ_TEST_RESULTS").snapshot();
diff --git a/security/manager/ssl/tests/unit/tlsserver/cert9.db b/security/manager/ssl/tests/unit/tlsserver/cert9.db
index 77cf603182c09de95aa48f63f5c976a6ed0ae298..7eb3b74a2c2b89b795feffbe446e0d7841feca5c
GIT binary patch
literal 294912
zc%1D02V4_P_x}$kgf2zt0zyQ3-OyDmH0d3ri$Fprv_MD~RK%{>d+!bG3N{owiXw^~
zdj-2*_J1~6q{edHUoU>I=Q(f4&PmRk+1c5dPi8mSY)FuADvd%+%F4}*rx9&%V{mvp
zZa9&M!{J)^4;fq=68wjFyXSb^uW7+qJd~2>eZfhxq;YIz-YHfcYZA+w{{#R400000
z00000000000000000000000000000000000000000000000000000000000000000
z0000000000000000000000000000000000000000_<x$=l9KA`y7<UcDw$H4m>!=>
zrsm}Z<|kyNCQ7*myE})v6TST1+#`qrA2Gn6_`^>$jwd13CPO6zC4>n|$cRs%Wc<h>
z*`Wl1uX71DCT`-A>RP(^SV4SVenJ{0k@h2pM28YEZ`WFoOq>al>U~?cBQ-BCpOX6{
zi+G1ZgwD=oIFd{z*x;qqb#?L6>}c@`8I&L1ABGrKPN=hsuY3Dwe!~O?d-*vBM-qM9
zBZ*=DUO{2*=o(xD{73kDxrP#*T>^qb&57{{|3TtEtoaWc)E2yezCuD@azvjxqE8(K
zPth!nw&=nRUD%@w2Xx_xE(W5Dcyy7#Uknr!g$S2|5)o^`Qn(&l!O~8!v==NL1WQN3
za-d)tFIXlBmWhIj39BcppTM>j+Jcg;1tnVxO12i1Y%M6+T2QjJpky0Cl#L+DMi6Bq
zh_Vqx*$ce(0<XQmYcKHH3%!Ce?FD5z2y!|Kmx2})Y^gOOw9!~=L2YdjKGuRNW2T_3
z1-WemxorfwZ4qH^VMgIAHiD(CU}+~<qU*L5tkqVqR$IY-u@l7F31aOK;VWotBE`<e
z*2a$1W?HwI?K0T5nRacaeVggfW;*^b?c2ia+rsSI!tC3^>|4X^+p1&VRvr7c>e#nc
z$G)vP_HEU%Z>x@dTXp#6z&10!%}i)B6WdI3n@MRilYW?jjvzD>+NzU)R)=gCkB}1t
zE$)a2Xlq~lfhHs|Np*K!JWePdIT@)mN?d$CElcn`?#CdFBmFQ5eAyG1;4kpJ&!_~-
z2onGR000000000000000000000000000000000000000000000000000000000000
z0000000000000000000000000000000000000000000000000000000`2RPgePvmD
za4gnB9QQbDD{D1tA$tH@lii0c&HIP<g7=VjlXr=ChF8to$1CTp<1OXQ;Z5O<<uQ3V
zycAv>ZzRu;=f)e%v*wxbh&*+k0#Abbh5Ls4lzX0ghug^A$=$?V$z8ym!JWY6a`U+v
z+(d2^H;C)W9mciiT5$EbT3jWr3>U}wz-i$;;N0NUb53)PaQ1Sxan^E{aAtERbBZ|(
zPBtf*Gl~<&@#VO3260FnV~#FIjU&$yXMbkDW<Oy!v9GYtv1`~>>>ccl>=o?!?CI<h
zHiu1Pr?V5-k?cUW2YV>nj&08R&U(*kX5D99XI*5SVjV{RdU_uK000000000000000
z00000000000000000000000000000000000000000000000000000000000000000
z000000000000000000000000000000006&-3_)B>T()U8t_ZVc;l@Z4#PNKqjK@8I
zlM&=XU$JPK>B_<k7ba#nGX%!Lj9Z1Mp;yKWr(?#*0?Y`@7Z|yHN77J3DZ0Ka4>M-w
zV#bUdfnoV9J{vVOj=r$Y!VD4>GmuPyvG+n;24;*($BfuCfwBE<aw=vdrC<gnSzv75
z5tW1)krd2`APbCDUu6<8LplL7q~Zm}k`FPXF(Wz-GonTbjCob#V=-e~3}%dt78o<?
zo=0KEvq;Q%8X+(y)tn2*jM|ZyaW+g~jGG%4iW#9Hm=O{zFu2(<L6{L8h#64<0)zfN
z!5=f?{V-#+ufWK0D)7OKd~eL4c?pcvs7Icd@z4V^9*hteiMS8$nDO2XGv2uhjHvQT
z7tGl2j2Zie3yi?0oMD*39*P;PAp*mD)hs8>C>x9!GY1I_*E_ogV#ZEK%-G=|Fq{t0
zw#STFc9>CSD=_Rn-nGGuJJy)dL=qSlLC+D)cxHtePb~$8A-TZ<GcK89M!lK9&>eNa
z6f>$!Fr(5~U}(gjH$q3rk5M3wcUZ#~xD+=X*2D6gGsKKq1A!q^o~J7?2tzmPV8*6?
zn6XhCHPpY1<7i<9TN5)_eFer_YPAMt98t%N!)gMfg)~+bGm2F(qexj`Je)aK2{Y#O
z!Hn6x1x8bXgCb_wD`1A5yufI5l$FB_nO>M7Eh{kUQeMko#w%&ecqt_?PS&eQVuq>&
zW~hh@j3d-b1k9)xlOl-A@QsVI>{mEe{uCVV3$KP(%=6(%b1!fgas#*;oI9Lijt_^!
ziQ`0Z!Z?Af>#X^#FqRVYI&(GCi1CuKk3nTPFmQzv3IhxK($CT7(MQuw3SJjf7VIwI
z6)+2|3QRd8IEuV`ywki?ULf}c_cC`ccNy27+mG{|^N>SkH?mXNfvk_LCgw+G6SJDR
zfvLcF$GE~c$OvONF?1Lbh19~ZLWe>f`Y!rnI+sqNd(bWEy$e1REGZaQaJAqtZ!K>E
z&zvXECb5-RRjef}1}lnX&r&at$$!kHb3++(8F}>g^!kGE0$cVLb}?rsXF~q|{3(UU
z3#TwsnC9qT4@x`$00000000000000000000000000000000000000000000000000
z00000000000000000000000000000000000000000000000000000000Kbg|Aw~=_
zB<Ul1l7ujEg0fa9C67k*qS7e2nG|wrJdHx6Wf94g3<`~cEBd3{V~7MdJfca`K-7e}
z6$QE7sbmWZm6l3luzr<+DNexQ8R()=kKl<%v`LzXhA?ZNE^DU$I!ggsR6e?(X%KAj
zh!Uwcq9DvHCCKdRoF~eWi-zT(i|j60Mv{oGlw4YtC<he{%M?{|hA2lm8kQ!?n<~nY
zf`%oF@+OILP|z^4C~u-DM*<oa|Le9N{p&1oXi=j?tteKMBL)qN7Uhi+<%mSXA_fu)
z@Q4kGgjfl^#sY5$B_qiqFEyD;A-C&}M0zSMg&#?z<>phu|8?X@bj4w!sue2A5rT#V
zi}D7Eas;Ab0l#j1|6gbELyPhiwIUx;4sSHfOO)4Bl*0oJ8!?!`#3Obj8-yhEnznCX
zFKRrQl9P|hj=N77v6FhZ{|~Wl=*nG1Rn0||!x;@5F3LMhlw&9wHbjRo9FJ&_)DRV+
zS3ZE2Ldhl4gn68P?jDR5G3e)c2L9abh!)}S^E~!HciW*w*oxXr8&MAHpO=dK+-)VQ
zSPM}Ob5lYD9?>W1Aw;30uX|y3YA(N5bm{Y^zn|4a)ar~lDmWd{Z^3Ar@%X9rpS^RV
zVQh4vhb~Cy!V+DWp$lVCbumP}2IxZ9oDhTW@MhkAcyt;MI)9S6A6mS&s2XUAa%iGq
zeMNaSL^;&aFtuN+m+G&xsGvnDi&~MAC`TVOthXqyq9}&~8YchqzAg82cQ3RESy3yH
z5#^9Z!=!#*wB*m-5@-?PqE<i<<q#tfa5A!-NjO%4FM)TRw~bfC8^P<xZRT#_(z(OA
zlAKqZ`<yH6{cIL{5bG1Gf<<MSG4C=rF=LprjNJ?}qhH~*!o`Jgg%<P=^qur+^k}+l
z!Rdk-1-`r{`YfIvZzr#W`?_FGp*4Lpmreh|b!V0roae-Gd+~e<$%QM}W4PN{-`T_1
z?+b!CrYxlJHY<<5k9~-t$J$L-WIkfXGZh)Bj7r`|UOjIekHH(tQ{_J3uHj~J9Xa1P
z$2jjfPdGO?=h@rYd2DOeYt{x<5^DhS8gmshlqts8%7|g87G5lzT^L?yKz~8sOfR8_
z(0%A)1)mD43-)uW3QEzx|7pq&0000000000000000000000000000000000000000
z00000000000000000000000000000000000000000000000000000000000000000
z008h?NDy#hxFS13h8SW=GDl2>x0@Z%>5jz2q};4bVm>vUnnkA)Q}gojDY>{YQUoRZ
z8e9|)y_GFXpWur}bV%BWrmzTQcXy%}nvqOQU=XQUR0~&UCKkcK(n2(n-t`XA?!r|F
zB2(MlU$_8^%g0h08lTtYHs!$~&O{P|I1+s*3}Q$slOnvqvKu9XlFToKObn*vWoJ>z
zl-yjbpd2jCMhna`Ao$}ET~a?pOIV;vhfNttBDzv?X;dsE6Aj7ea=%_IS2~s}4b7Em
zN1);nE0P6bCd{Qz%|kPVGO{T|*W6TEYGQl_F&w?sJ*AMwuY6cud@>~kD<T;!BFUH#
zibwQFL_|kegnGLo{Ih63ilJapWHc(V%g*U$#R*tMJQ^|DijaUuOh`tEfiOa+-TmHw
zG%MOc+yxyZ4htTI2FD@<G9ED{86$?mU|pAZG8&bK26eL=VzB6FG&-tFD|NZgG%-Jq
zA0D6At^$!*5fNw+;R6W;c*KT8Lac;E7z>JMf6MK5eVdLpxT`afmYYu*i4_xu78B|w
zUL=c0hL8p$1BK;SV^t}L&qyVAw<W~z+$?Hx``s6Ul^Bec7&Jn>NCA%wBMm_Y3rn>9
zWr^unLBzz|j1Ye1Q>n>;SeXH6ng0KxmLt&N+`dKquo8XI5`CP-i^TEBAd(|uFD%jO
zmnHgVwcluOtT->UI8PJ8NIWut)F06mmZl+UIC@}VBhWDSF5|lW{%hAA-F?D3-$C6C
zE65cs$fZk%>eQEo&D*I6XRL_fXc5D@?~{IRcIY07r{(8TEL!ht-&Vv>tcW3K5l&q;
z$1gQ6GoF^1Vi88=cfCA*OZ+IKQ(XpQ1r0(A8fZ;O!6W7*Q^Z(UQ2$@XJ7Vz;XuQ1*
zAq|gMkjxMhVZ2_~igYf(4lBSGEx?9ENWvp#Boo9)SOD=y0V39KjfIoYaKxUFjYklY
zC1NfNH|YFkBN&kRKk6cUyRqt0?QX;PyM&n6x=+k)2^sjGzOT`RVk@k*a789v-;dgF
zRr^t6$bSR1{<HU6tR>i3s@L|CCE7R^*b_7Ki7EEP7=2=dJu$#iUGzmAb3zOrF(m0D
zdcwMDwI3s$HntxYsf|Wzbs3bcJF#<^CKlEg4b$lI{v%?St7B1WXq0M~F5B&XXy3Fd
zSiCYCucSxt#3R}yO+-T&->1v2=!50&jpkR>A`HSKsw8Ekk1)S%04;?tQs{f00+vx8
z%_wI<7==fSNCwCNVMcACe)HcA0#m7N+a!FC>4k;LqM<TGf*T&uBxxXO!cfId+a!(U
zmO^t&>JWzG5e<?Wq9V*KFRT#_jd69B!19Wtc?n%66QROfVv+<U8Fc-O!#EaWF@Y7u
zDrMI)zA);T>D<rU`P@*JHAjaX#qP(R!@A2`$F<?Ob8m5;a*lGStX|Ab%sV`F-YDKh
z-gu@JYdiN4`xUQ+=fYUSS;AFh&ftCIJ>=cuo#s{ZmhtBCIJ|t`NS;4$5YL*Y$dlr}
z;XdPD=APs3;cny3;I89Rxk+4Kt{c~kJAf<2`Odk^xyGsF?BLAdOywkTMsbF4>^N#1
z1@;s69d-@-0DCHXJUf`}%~oa0v#zl&vNp0-vc|9qS-~uCmMKe*MPPnrUS(cju3|1?
zmNLgM6PeM>5T+4Rm#NNp%XrSX&p62~W$a}vM*sfCOc($F00000000000000000000
z00000000000000000000000000000000000000000000000000000000000000000
z00000000000000000000004l$g)~7)Yz;07SENKR6w9ZkQ?uw);eEw%W3Zb%^SBJ0
zG@2KC&Qd0r;wcm_G#A;0;h#lyb!K8d29_3LDP5D`*e-ATJ75=JS@N-zhNXD}2;TVI
zym$)|f;d{FQy6)vOo|&NgObb-BBS@Or{v~hd2_Hd8%wiP2<GipH<E<jL7R#>GqE&7
zmY{(z5V+E@m(s8_)qvoSr{<xqP)0VzH8+)(ni!uEo=Qt`FQoZU7-4zw$&?f<cQTeH
z^(EN1i}KH+wFXkK9Aqp_R3jkWl%IgP<FRzKI>8#BN{uH|a`O2b&0lW_zYW~o<1qgy
zERF3)7>ZAbC;N2UNHJKhXe^CFtC<*Yk)KB)Tg2yCP=4I{I}*zgfu-TP1Q&c>+nw1h
z+}$nEJDyu4I$O|k^C=^-d|_A`ir#`gm0A#=kxK4V3Bmoz+qGQ?77~o5LFgUfyAN#*
zam~#@Ur41U2Vy}1Sn4l&y(4n7GTZkyKP<!-OMQ$8!6HKav)a|y8_Vy7rJiW#CwC0+
zz<eXH)Lon4BxpXY_1gBNyHA)KmdO=MUC=JkmV@8l^U?J>WA5QtIt;zZdM4QpEi#^#
zpG&cz2ybLR6w5FKOP$a=w`Zp2WyaGIQ!MhS{QZ^3uW4)c!C1CISUOOZV2SUN%MtTB
zV5vP?$*zUkVQyP2wLyp9k8D_3)|iuor3l)BKZ+1)jTPpz#8Qji1pN+MYmPb0u++2<
z!4QwFKv;wc<}t=nBcZ-2w$nPy!^ToQ1p=|P3@`ssL+oV(EY-zQ9W-0p-t33Htc|5w
zas=%k+pLMb*cVGRdJ!~RSD}u*riP`es5E9J=4HFPqx#amv#MZOl(AF^Erv$Pqw%ZR
z2YanImMWsV1}!FlmO{yOr;^<TLs|iI%VVh=+F)5|7J)eCy1VznJhE6SgVrY_i!Vnh
zS$Q;PenExtnb{c>*Q`uwEQ=JDN}}}<6z1wIfxRY<r36%6(Ym@ii%AlcWY9Ix2jEx*
zPjS4{yji>$o&mRoyN5f5>%~>#T<5Ij^kY9{Z(|p-o!PRide&kVg=NY7z&y;H$P8v`
zG43<AFbWvM7}A9o3Kte87Mjy<(5KLy3ZBwG(eJR0*^2Bq_6Wvo28+ItK9l#Dcb+N6
zc*4nL4rCHJA306Tb<AnZY-TtY;i?xF6{c_|7rrRGOpl^FbE*ry3rRdzo+<q(N1XkP
zp2sj`$TQ9`wzF&5J6XOg8}3r>cy2P+pFNk&DOBbR=IAkE8E(7^-h9?8RwGZ2`-Zij
zwW4ru;WCyg^9yS%D~&E&@RGBE6UuGiR`Hm;c;+o;4f@vuZ|nd7000000000000000
z00000000000000000000000000000000000000000000000000000000000000000
z00000000000000000000000000RK-RLBNUOiuw|4#qP*XH?YrqpEGf)XZ7iR@)n~G
zUA%%DgWklsI}eYOiR;^KiQ)tto`r_R6rC8N`}U*X-lLlq&r24Uk+B>?V2W}uPzR%S
z=he5)+nZ1BnDODzyVPxIk4egfXnAzhtEaMsG1M{h+uFyf&Am$!FCD!yxuQUnBOi6p
zqh$-GjF&z=eQU%&Vu1z458NJKr=jKLp<e0DOV5Wy-qFb)E3x|E1@{R7Z){3(MLBX%
z$BNIz(!9tEo{0lOkE>MnsSnX#qMD7CmxX#q+nGGCm{n4L>sn&E+vz6~MFj0cswhV$
z8kT{2!|cj){rqY^5*!ZPq%>vlxM#>d>7pEIXjm%hZP<JI#C1*T4%?;1Pm+R91iW<#
z4oeZ`NJhhwP;d0<!xc9qcLvlQe`PpAt!0n1v(I6QC<hr0OGLfQD|&Mkw>=%~W1AKo
zT=Dt+&c-?B38EbFXxM1fyH8TCX~w51`$LnfzFi2&n10lsu^~>BV-y+|i+cMf-BRbx
zEqc)GB!9sF{z0*S77gARBgzqthDD)XUJxtvvE%lXsM$j^3&@+V<HRqgMT&Anpkd*t
z*P0e;JMh9A{LZmPDLX#*jdt2(S~OCWBMc1-MZH7Z=YF=HKKPB|#?Ae9gq3WV8{6_S
zM3f^K4GTiO?qhaMJ@v(e?!7!!X2^WJ<g9^*LIXuP0?;sj)a!cX;asn$Gw{-!`v+q!
z8yiv`OY8kaIegJDAJqH(VT$<rvT0vxn1>F`lJvyS^`sy57Ul3l!#q*%jidWV*BXV)
z{^#yXX4boCN!f#a!aYPeMxbHtsCUM$GWK9CNdw<~a)--({UjVFM-O!q<#0vATm*$a
ze_MEa>BX~=<bJfR1G9`T?dMRPMLC9}VS;<h*A^c1lesv2>49NU*(!r)8?Wpo?J!i7
zV+b1NgnAGAIRE1~J-TjBpnY}hTZ`zpnPx_VML7ncVFOXG#<2co3pbgclYDV({`WJL
z);5~{CXS*U4rrJ?>Lt$jV%aNBw-Mj(>x(%P`z`dIXx3mS%3+I!*$9-zXg@N0>~#Md
zGW8PHF}P?Kw`~k-Q4SIshM?YYfx0Kx#0KbiOd!q_zm>azID7aCD^U(hG|WPvyKx?m
z%U(L(K56rzu8*_oot#Hw$mXIPW@wlx>fJc9;i658#RdJ|>dm~+Muh`UYTlcOau}nI
zM=6unpIJfcKe42|*!rn#O>$LPr6Kw*ghRddpXbXyrHqLCw$Wh6P2;HJxjEO)umwu^
zP<>v-s$Dn7Wp9k%q+s03rr+y_dT2F_L=|d)I^r^3c<hVLxPPi*yKB?dpv$hulo#lt
zVLF0=Ge+rj<fq<YcIg*aU)p^^+6(br-%pf78x7M!y+O~?EvujDI*g<5ZrT+4sB!!q
zhgq7U9DUI+4b;2z`_Llu`HxmhKhUo=)bLP$W3oF|U6ex&4O2zEi<Bw{pGnS_C$sHX
z6=m0NT$VpKNkx=H84XiHy^l9muQIX;@rmF55my{Fu4=5)5z{`R9KF#nMbulpr#XNo
z6)3@EoQ};-E!*UG;l_IfQ4V=DOb+$N_iG%=sx@0<dB@xH>X3Who*vt6dx>($qG2+q
z_wz>k_}OQ27jXA|dwcZwaz>>>$p~pt4k<KD67?Q<7d2EaZjNu^%sws4b0mhkg~ZK~
z5akd@!w9GsVK@-2A0JRFes2D4nU9BVg!gC-F?E8iOm_}>*8rTSm>P~-%XVdDFbC4-
z7VOI}$<@vA$=1lINWYS{I=M3G5oKq>qXgyAO|ca*_0h{CwuE0Dxi(~TaAVLKf41Lj
z-*}G#AIsrc-cepgLu{S=2WvS>JJ{OetuK?lAg3($nBOxiH=bg&-H<mRLXX?uM@O-r
zowk_9bqy)COUkR2>iR5^|3@C*>zqt)X(uTe@qPp^F*Wq>znvcfZ4@KEba5301*Ogo
z6(w7o0{;((Q{a1*isf*fvMBI<3jf2JHR#_*^Aj;VZVfI9eSx2J_r{OsgZlXYbH}a^
zesEWHrQ+AJ<xiseUmm6}b!e<t(<t?Iq}tTmmI12KeZ}uDDK$vyE4EW=`n|)p?;D=v
z4|;2BmQlQ~+|6G9h`HH_8M8E%Pc2Lxv86ig#`U5g-yN0DgNEHWH1*Z8f?eAWwTzIR
zXM2TtX9snQ?St~q2C;PHQc1>9?@cGyI-Wm*$MOI0ML|9VKbp)|<<GYI&st1{k08p{
z9Br{2r-E}Kt|5ZvK$J+m5d}#CfAXd*6-vpY5nY|d#NsmXXpZ&|oVx<2A8(H4ectY}
z-3JcGD^#YX4EC#()+(0ThkrL}zm>xzM*8?v??QB&f^icD;Z!<oRFSyt|M6CJguhk!
z{Di-gQ>g{<8L4D9N(Lo4o<<>uq$X1-x&B%1g)|=uBP=gInSvDK>-i6-<peRj7`nNL
zyrhh2iD$_Nc|5+C1g^VQL3GsRNwy@!8bR!>Np_A=>hiYjpCW@uj)=W5#!3+5C9DYX
zM@@*ql)UULDw&c?^v@zv+SR9MS^FB`C2)kIsW_x)qF7N8ZhQGTqv3s;vOkRe@<?NK
zw3pt5F}H7Nt&mM&FUq{yZ*&Q-dEP~p3D>0}E+~n+?_R0qKAq*&ub0w@JKIWDKU*__
zu11xZzsJCIux*56@ecK%#b?*bgst{HGCE*%wCnS2Qq~I;Nlyb8R8JejntHcxll%VX
z-%GsK9hW=4$}UaeY-oQiF#^B4uHv@`BFEple#&_KcX2TU*Qv<}{F>sQ$-X2kl+rg;
zuG=4C-sj{7GIt}V&V1r>(@@zjTH6fPPZ^<Xa6ID1{NXy0_MZp2)o{7Da<b2}aZmS1
za_)VIMXVAV_r2bJfG}B6)+=Q7IWfOQj*q7}HrWL4o<-9w|G1cHp}9uJ&Y`An=6A--
z7fO{$vW08=2XEP?UU6XlP{RpmKM>WS|Cim<-4Ox481d>U$;)w~;W|lPw^eMDyq@ku
zt&->2Lz0&o_2^fUm(f-7=H$se{(eiz`90U@*xdXxwdbm=KgD?&ZWu=#ep%f}-zJ?I
zJahbD4?#CD#Z9p9BzYtMvf`yiJ;VtVkK9q}_{w&H{}|M&ZW({BZVnyQ%^?aIK<ba^
z3S%?`G2INCpUT*}T$|ghcX9ar^mCSx@drIOeU4Ca!1v|t?7h?Oy<Jk&nXG_~%~On&
zl&u>gf@cl0S+ng~@{6<s(J^IrzRp-6=k!XWGH1_&ucKD_>_21@Q5~A2@l~e&x*2u!
ztEol(Rv#G@KY-}JXjIC#xK;ni`OjLBP|Uix%vt+x|NRV2+g)m<(}gl-fDGs)W6J0=
z193S-R#Mtb5-%YkMUd%6+hjLy%DJ^;kMk=<^@FKr3gSn5Cs<D$cs<5=hGI}qj4ta;
zbA8$4p>ERd`;EUoDE{WSEos1vv2n7IE}9p`nD?$n*4%JE^ZBdW{KK4aA4?);4%!;D
z;?`%wJI|lTMw?nMEZu~UTc|!K>En{?md$fE*1g%HwSAilRh3))`MK<;86y-Yp?h3Z
z&;6~P)7|+AzKD(JDG^JJdVuRBV%=7;O~iV-2Vo*cb8izd=6@+-iMS7KB4$UjK}f<~
zZW=<#NV3R7$3B_=t`<+G<mB`BJ<;7Kj40?0?o_e`g-T1MG5EbDy{pctg*FXb$qCz9
zJ;~*U<jF(pYs-m-%WfWJ4!<8qAC&g?+3gu?RVV1V33`eXZjv-krNeeJ|FX^{;@;x~
zI+w@aPT^)+r2g1U{#GKzVobi^-D?%R^v;6!?;7iun)ok^{h3Ox`DD{y`}DwFK5M64
zB&FOwnB`5ndt*tYd_a~<Z`A|4c6c$|2c#FIdwmbF8fvNWY_pHl-K8@B7|B*7yf3%7
z%S?7Ybc$a2zHDvbSf8k^c@atr!urn$7&Ni=%@c;3W#jBDE7O~E@!QjLrf%?yUp3bL
zMN+b#^QU|-^D*gLO(+pE<Ao|&G#@FNgIJ-;*hkzLF)Y>>)%2E>!uZVW42or9RwiQI
zs-SqhxFMpC=(Rpa@Fi*~G+Oo`E31sG#Q2PqtUTHvM?O}+7Gpfp3w=>hT$~^#j&!5U
zF%+}uudJ7^i(e%9c-ERT-1l32$R#^IjhExdC?T2ypWN0D);pd5p!&nQDytT<L*>Xd
z4Mj`k9_YR@iqh-<+}zrOqcnBhsC9-O?=`ipT?Z;Ima<tKlCiOdUZi-jA+IX@kwm@1
ze$Tn*6gLjMp*8!G?AEi%g)@4q&aR=%-YC0v#X+=>{tv_PUxs#f-k2}vu018^iMV&T
zPIBID72D*zr@MOVoYbX<=A=>OmA{&krghb7%aA$p2M5Jovak!aXY`Kt9bQjfFY!g*
z#;%!|hquce=ziz^juH!JK{r5frR+{~QtDsU>ZtPlIP56AwfCk|82Q43ZZTWFN-t?u
z>9jwemfCleVEZV<ie!P931jrz4H*8B8&PoR_DABo{maqq4`vq3Wpj2baM<Nh)*drT
z#YeT2j#zwhiCzQyg~!Hkip()j3*4NUE?M+LNsjhn@hd|uwpC1F(<Se0&_6Rz`eI24
zDI(^`xagEs_{--vGPe<qOdHM?Uq)P%6~21?!HvlcV^1%Qjmu0cuo=yG8+M*?oHs_w
z>j3TG;#EqogyPFan23o`di4-uu};^P{67}mHhsm5b)&B{>c^Zim~*AfbmFRW##L(=
zLq{C@<Yexr<ELjDyt?<xZLj9rjvg?{W}tIOxTfBt%X>1lULU|O^>rP3v}pR0D~!Yy
zr@W+huV~!5CH%xG8BaOSy{>DQ5T-fAJuNv@SXIC6an(XK*_B~(m&r9AV-i9~XOJRh
z)>(PH5c|$aIW9Hp;8e6<i5ee&y#KrV+>9@q!+T0LqssT;I?sZ;t75xD`5x}1t+F|+
zhh#JGDd$(Rnc7u0x44Wfka+&`^8h<Wvc{xw#^e0FPE6)%+*y3XZL$X`*IfEl!juyI
zp@ME;iz`j~k7YCPDH|t{%}lZ#`t~1B%g?1)PztkCb17uLaGLOiv#eD(Q`-+xanZu*
zNJ1Ri2`8!j(+&ei5aZ`&7xH7x?!q<yu5h+|XZQY|)O*vmubYQy(~glx_${-3X+Nw~
z{KjPCorJHkN8~7mO0$+a9rH5ssmXYLsNtN>gyMDYyi4OW^`1K2+N?$xJMrGim~oD@
z@)6HIdhGV%&62;oUv|<Ydb({&!qKEv<EFgZG_cslGN4Lr#Kg7A|Lm#0dd;*Vw$GMm
zi{NET^Mt~ggJcOdi7%Xd87wAt*Ovds(%ErGplaz;-$dQ~uvS&)@ZL*_-&nI>9g*ET
zvL%e>eotY9$J6;V-8(J~Q!n?La5c;N5~E2YpkVJlJMmI0iuQN>I-h+puS)N4Zmy`e
z@Ln*d@|zT4r-xs$Ud;ZlTb}GRFQJfM2RaYFxZbb6f4t{e<2y_G$tyq5c$RZQea*86
z*A@g!S%2WlEVMg`8Ww-N)4Th+0ADSK^psi#K4sxLsb#lSY*Wjg?wOcchC8*X<?#Pf
zExlLGYEw%Mk{Y5S-2L(av=mA%k@ll=q;%Cx)3dwJcn6<vc}h(0<=Z^?u0&oAZNR;U
zC!Vk_e?OCLwt{N<pr&NtU_oaXjw{W;sSN)wPYZajD#HmiGc_+Wo|c$mkx!-N=I7D)
z$Ea<}Y0g*9Ijzc>(s{}$vPC-Sr(H+=wCi~6@7G#^upbp@9ZP>Q{X8%^UhIlBZC3{J
zm25b`u{?Q>V#M*1qN>|WM|MBE)7eJ4hkRBZ`+^Vr=yTvsM0un<uclUQW*S|#?=}Ao
zbL-e<>6M4~)?7S#YTP{IJRjYW$E&l_GV|s(eI}A<CxQ#k@4j()+1IKPjq}sIoML2#
zzqw!6w6*A^_f|c>pphYD`68i;rXWdtArz>n7Sgv^ot#C<qtXQ1_xHpTn`-JzxX+oC
zq(5i?JF5P8P)gY}vv<!6U#8nfyKQ~MdG&tEF88RxM+We`v=7y;H(2hy?Y8UlI;p6n
zy}=*TTK1@&K6fgoe86})$=(yz?l9gnMA2-x#*Q(AE$$E1b535UHY|VDV)2N?IR{km
zuE$<@Og<>SgWe!zRCiD3Qy+izh}cF)4YXhVe3bml{odUdsQ5xUsHcR~d(})_Cn4>&
zifuyL)19+bNC)<ikh<R4^?O2^+*L?%@-x`SGUgw#d$3~>CEP@zsY=^nyOZhDg9|d&
zY<+m|uw;en@e+MUL1(ZOOg=koTFPG*Qr9~>aRMRjPCq-$Jd^+L^wXSViWmzc`~PpU
zdHUm8Mat2qw!`Csnr#cVyjIB_Fg`yfuyTaB@z;yjXSgnSy}qC6^ymn++tN>((ynVZ
zEj_GKF!|d3Q;f3FaXU7jEn9wURh9IUODCg06@0O6*`7|EPOK<Q&O@5#$&#AB`f3&~
zl~XQHuWFE>RNI}bFR<~v@L*xXyaQJiGrb?Ln)^T~n^Yu2uswX)?2qUc_v_M@e_cGo
z^6dBeNCfPv6d&&~+?#Z2Q`ic3j=O8XqOCb3>DLS9p4{DQw)DskgU1|PT=&THr0bpV
z@}u)!^-Gr>H<&4ADwn?FZtw+p>y#PA3uHGan7bUdv&mB%-p56DCdri|GeIiW*{$xZ
z{^yY1?sqq?pCqZn)5+9cKgD~gQa{<kr=xdJ-k^Qy=Og3Kc6xW;9_4GMLr-a@>zy6A
zPMX<m727nkr+a3rX4?0VW;z|7{d=03)KxQY+}o_DaO}*6)Y~Cz!q4q|E@mHHI-fRS
zQOvD$@qI*>3Zu_EznAp4Ydy~y(@8Va{<3B|9Y&9|x}ALTMN^+Inp0avGwF{+v)$QF
z+m2^DZKDtil9}MtAU{&C>*V8)RI|D~kn?F<;)yN(w6wD$jfQE@9Mfyz+t9iFRb7|W
zD*8?2I@#_HINI05Zq<102DfLy`^m@8gl1g1V5#4Ky!Lxup_iU>FP-y;^fqW|Ywh&L
zTlySGdTn@jQ}Y35>x9IU4eMQ>EQph<eznAqe4?iLqr?$4T11xQ0XrIP;H4|4%pzQS
zezG}AQeJA>O_zWv@->?xuazZV+juH`tL$j4e)RA~Pc`!nrrarZe_CU2Y~S3!JT<v*
z!okdcg2FfMxc%td0KaeZa5E%J?|)v&NNUvCx;f+-G0mm-Yliipk6KR3l|!c`*{rj&
zTJ~CnSm{R#dXk-|dVjRRuCm8bvBOW--A!BFaAbr2TC^Yid{q45{_gI3^L)Xy?J2=@
zI*cBmbr8&MtJo%(J>4l=&u!ZD(78>!k9U7{Zj;hgDvg>>#zua2+N&H`Fz~}2=P~)5
zw6(XT^6+FW*4bnDVD&|-K8`I>v=(#&b6lx!r*oT0e_1N+KHkA~l*+c*r8ZwE$F~Y4
z<u^YNYB#U6?KrRGOQade1ThlE5PuAre>1JzF{XEzPwhMN$9<1(9bjfR$9c)*;}zoz
zT-al)7QD(Y^}2Dh{_7&ghTR@^My#|YbJdFyaxVtgeI4`NG#+=r^}(~6@sTm}kn7uT
z=$25c&o|xrzOL{_blQgj3{Tyre6?P8363(f4JTsvT-4qDl<-xdisjyGj9$?GOGUTJ
z=5HZ9v*>w&OyzCUD3Y+tOg5Civ^YquqF{MK<{DF<IPGb=GF*)}-|Z$K=h7n=ZnBH_
zo-{paZ33&;Tr<tns*&mM$~P1_40qo)zj?W>*;|7fR)i*9x2qvrU6?aIR3L!~)%f)A
za=&lN>SGzZH7paV2QQPXaV4x-79Z}uQQCR?ev;;ek+n~S0x4n?{Ly~y?#dv(Fp_#o
z80|hb;W`Opw^eKt#-8qstuslahh~x%LC=40CQ0rpk9T&lEOu}4DB9Pz+QPJU>5<d@
znFgzxh!@`8II%PMMJOYF#wD8)V=L@ioTX`<W|G-|SspEdp5ZzkeW&K-<)h!?6f@(i
z<Lp*-B>&rKq)o?Zq)ilpkSq~%VWdIlIRrhGmO}hd6(Uxbp9$slsF{lEw;Jt`zcsZ+
z^5emEt8N56-SM59o~wwTL_%J;s(oH%d2iYxQ-gKEl*%_1Vyhj8hc7vsGqiuuf(pih
zdp0lZrl~Bf_FK08^_RR-?ZLH2jwwGf9W2kDv~F`*@0^>@*5>5c)!%UIYg%~x+cM9M
z&GzA98)wLE-8lXBrW3QLPbUb4G6P9N4243ei}Wkj>eQNlT`Z*-K5L}aSJ<rzT5@TN
zm`qUOgmbs9Y*F5GY}Dm`#<xn|r`KJXx;^qprNZoY%Gzv|bZ7S$gO#_$Hl>uFu-P_g
z%4Oo<w<$A1zZDm)7&)AqY}h<&vFcD~@hZmARj0xS#n+h^6N?Ot@`fFaAl}kneA;n&
zh<b=mZRYsINCh?{bT(JeNq;^v{(QH0cWESFH!XWgH!Xsm;yUSOw^eM@&7SU?trJR%
z9-2@Zk{f<Cp-k+mnDHNS7EefX(wX&iTqN;ARn@*5wMjGmYA-C?KO$$H;=0K#0i!pS
z^fniC1ASa+aHk37-#+#>BwxaH`LLWXm%4npENzv`#NYgo{HH?M{`jlg5##4(M{KLY
z&s1`Cf4_AREeH1wTat3>ZUyo%y;osI!|WWx;79K9Iz&ZrQd6CYLp6<%Der#gkUV$z
zm{|$rt)CWcoT##E`nEkm)RGmNo`xas$u<{8?kk%&n4IrgIXZfV=Cj;pU+?nI=?Z6e
z*WP)smN0mllWw4dT8KF(%x_1^S6_>oQzyz+jqnW<s$?pXj0_N}q&A{itkJ#&|N2Mc
zr8n`K5j#sqG%U%<GmU1@^m$6EX^~e9)sdE*8*BTTE!GWu8CE)_+-lFqhvOWE&fa|H
z>GI7-{E}~&KA605lDr?2diLlgMxoN|t+B7ZMIlRdcq?aLy*_ES(U$l5dsYM=u^h4u
zKZrPMiH79lr8Cu&j?W2xzCM?kbB;bNCs)n0WiHxzL=A#J+|}J({moZKvz}5$LvlT?
zlQMQ&#WrQ^>Hdf*W1?xBGDiHD%BVZ)K$|k^lk^axaOd~!a17x^rBQM-`ICrv8in6Y
z61w?f(W(A~R2Tfn@y7Ej45yGjz4ia6dcCUubM{p7qq3`>*9i4fW|ugc2s(x#u9S&W
z>9Cm@e_1PaM^)hjT8SNV|Cn3a@Wpa*t5_y<o?HG_gLINl>yGki9fequ%n?&zDFeD4
zQ&^>bXO{V7>Z0vD>X^fCxwD%s_s%_C7JPoscq4;;<F_Nny<R*F+`2${<n>J|_r$i|
z|0rMJar*Gq6?#uE8dzixS-~ClFxl_^@y8S2?F+3>J~wq<rdQ*N4;y26&yQTsjD0RH
zb}U+U)%-P%e(PV6eJ&1RKmSL0{;ABHH&`R)#@eT6znf-L8FyQ#pJ_-6qA%3Xeu!3a
z-wv(%*XNiuix>eZM+PyZ4)kAeT<iK+-I&*LL<6;V_iTnqNTp~^ocd&g?^l1XCR*vE
zD@jKRj#jYu(s!Lsn?Pdbm%P<W^KzUX`F7kud}XuN&WSeZgI>9ts!q6mtcV$8aN)^G
zvNm(>mb*iVArB^e-{9ka`jJr{`EmKQV(W>QaujMO<yWR$M|;%okCi{&{oVaE27Y|3
zp<w6`aiwCNrWp}`dFW`wpX)Gmy!=D?W99?@F}ii!#Q*sjE9;JDtgL@ie11AMYS&c0
zdT^^3YnMEoS}$L3eR>e1@qLwyg-6S%4M(qSe-LXc?c{dz8nO5Ai^q>gZhL!hLfk>p
z^Zm^mhWYi|$!w4cGjhx;HkG(o<28BC>kmeLTfOhjZM>3m;P&K8Pab?vbln%6dScTR
zJL2lz-)4E%PoL{y{7UoKC`S+1x-+q=yH*Ysjty_b^I!FPr60Xs8j<8D{CBbL&eorf
zv%BCYku&YnCi;2{t3tyU$4fuFencOAqlo(DRR4*0Le1kNH<+wl+&3e0Z*2Xc&Fc#n
zM6L|?$i16waqHVAjYD4(uJ69ulK50*iS!UBm2;8hTeoLyGd^WS<!(A~N4|V}<cfJi
z{iCaGR@{w=bpGc`_^cCEU&nv9)=enPLoSZ~Cg}U!PafibZx?p=V=Q>j4dO=sLnj3Q
z;Q#k2M)Z2>&_Z$3VO*y}i|&4Os@<VQGp&B0bHlKY`Y9>qXCKB+m93qhOp#DwE+oh%
zyf9opZ|^-D({J-9_em#iJo`erbo}-W%?mDE2v>3U-^g7zY2Vbw4ZKU~g9plfu`{>U
z%^&l1gJh11{J`6DR;<<5w~+8H+I59Ck$%5Co2+_e_)+ts!c`8mm$|c}gJS1y9DsYy
zp$iW!_*Lcp58M4eQj8e))DF`fRf+4g!@8YXwe7H;o?Ew`B{S-wvt%0a=YMsUEWYcJ
zUt-zg9nUH@dxZ1U){99v$($ML{77cNlr_73UVN|npmRcM>2|MT#Gt3Tfku2Su2VPY
zb_UYc4SISSDeMNth;C0cnM`?J=O*j!hw|DrS;L_ZGxH@@t<X4SSLkyutd2PT-sw}l
z<D|p~r98q%vv2f0Ns}0{!A9{u<-<I!Pa(xVG0n>x{0|+TA9O2w+8wdyXZvc$N+sK_
z4Ab0$^uIC9|JIg>X&bfJs?QE47Qec_c$@31>y5Y0oM@7>|G=wD$()w@<lW7Yd&K;&
zyb97D6lSvt8#xr6wviL_UydBY(9LZl$B?8i_^g^ga<tlC$lUd!=TTiplQ;2GOkC0P
z5y{5c`RnX;rx;jpcR5%zZ!E(ve4!asx=nFP+4K^_eys<CDL9o58yfSM4+aTCH{m+{
z1_4qmX39SpoYi_TII8o(;BU4^r_(5;j;B#bzum4sJw!aSv^lx&s5yQ7la`n9LNu?B
zUN%QEDVRLTY+c}V+<jsV@%8B?I^OvHbEl7wCR+OsNeb5dI)02<(hAL%XY=ci>>AtR
zYp=UmlFD?rzinznU*|9DZ_cP)U2|{P^^CQX^-o<U-&?bAj=}I6J-I;rhHr<aCml9*
z`mp@?j0=5s95Gs6QXxD<Ohzb3f8ps9O+=$ut*tTt`nePK>Q_G0uXi%$9@+Kjh~q!g
zmoC|K*Un^>i<Ig6^N(T+8V&XgbiH7CaofxY)$FtrDTnkv)l?1FEUK!C)h;`oqjV);
zk8R!gnqv`i`c@@%3ofbZthN)=<47%-9<a3`a%LebYKP?cn&26Ir6jygz5X&}?<Yz%
zy?^7{K(Tra=7oIkV6+$g$q4z~yxsjICtpLgdrCtILpS0&{~TX;RczDHp6;5hvk$GF
znSH2#8TZQzT4THFrJUmv^X>n94Do33#HZC?bS?9<8ZZBfe5h*coZ)NA80LqyXU-W<
z*A#REZCt6-fBV~1{Ece8pcVUW4qq)*_-e^%Rm<2vzxp5PsEkO*AEj#j63`#X;tPw_
z*A5+vy0Ye@{<0?{YM0KUhLEE)$(83f-ngpJR3t5aRLc3tZTI^sSNo@W9uA@|uij#+
zA@^NwJtB8wpW^bWeoyZOO&+zVSY|aPF8^g#BmLc~J{!LH1znr7ctgtDx@BvZI`C*#
zV=q6;Hc4A_z{bL6ewov3)tOdr*VYte%q|$%^I!7nTQ~3A*}<a&YmPVS59`I*<a}~W
zYV%S0z3Y!%i{C#vw!r7olDkJ<2Yz8rZJgdz=&fMp6ZFdU&V;7^y0+tQeV^>GtyX2F
zRnv^cD=*WVSt}%)B^^v^1JWp~v_^mWvLQV3jc29T-1tYD)xr7cobvU1citMqcvd{*
z%$YBJrB5|JS#5&$7E!(axAt#$KQ7D{z`i{sfc&1{<r>v)tJo%hJ>3ag1yG}h1n@1j
z`d0!N(^UZXZ}Sgx?*Fl#^5jUu5;>cpua5`XdboTjeZi0&+JEh3;<dxcpT=ja3%Y?O
zuGG4d0EYf$0enk6f@}Zj0bl<V`TAGbs(&$m{?P%_@uLI2{^^m3h>kEu{oj1Y^>(V_
zltGQo6q)B9KAX>uHJx&@-gk86PTVw$O7HWx)va|l&L64Gt(M)9J!`03L)4Yw%O=0L
zwTC%fM~tpA!DXDm_>~XqFUh`P1jO9BQzSQ7UppbD&N2F2FiHB2$Ej^q$+qNYpB!rE
zPbnh$UXXa6Lmc#Q!{D!L#B3wylrNQ~I$)Phk&y(!R`BId9Z@Y-{;w{W(!GARE~RYE
z2E#R4$yNtkSF8%072rncuP^<*(Mml&(6isi^)CX*Z`o5XUr0Joa&GX2OJT8rroMLC
zW#xUoT#$_#V6d9I<FRpnvEr-8>MTsJY>V>uSG;+s@w)nKNm_%M=L_--RnIYJ%L26J
z8!CbtXYX3G``oF~ekZ~wUb^z7%wq%EPek?i-`Ta@{XRNh`P6z!`QB0w<2or{w^eLY
zzMk%XnDRxdwke<If2n*eq_J(vr%mD?6AAZtpYA?Tjqa*}A6xV}%S^|=yr8xJzzN^^
z>0G62yK==(>6b()Q=hwkPV*S^wZ6n$MbIG}aiwION{7w+%NLgNH?J5c(7>$3yli*(
z@Kjn#htD*N#f<rqII~p}qdQCDPg|tp<j{6thsh!TX@`pqyZ!k2w?ALKuzCP*U6sv)
z^?9;l^G|ya&FS>*4#<av{qLRXlXddwqTM$h_%}%JDtTqjbA7Sx;S)8}ax=}BTW;$`
zCa!;+raG23Z|wFfx!LqSCa;rMa*rHy4lu9UHGpM1vNR<@0)ImNi?!->oyjg%MAOR)
zoqQ-qmsdA`($ltd(I;&md*)mDg>JvQCG$h>iseoJx>nAx=Iq^fDtVgL7T4YQiIxwi
ziKV>$X1R3Wu8U*e$ep|$uXwo@3I3+~Pt3#Xn=*}KUo}iL+BRll(988nvAOqGK2p}A
zMN^K_{p8N=KR5c#zBHS@hbLb#H+f{;`^MX_kHvlT#+EZ}0>i4uH&$3^<6i|9u58+R
z_w%(e(nBxPr;o31tU>$JuSdwA?ep$#6v5X|<(|^d7E%$elYVwv#Wwxy>5kbtb5!b~
znd8HmbAL5+jOwbI2WM69KAX_A-f*p+Vqvq<DobUZg`AB}Zn>eJA&1sDwK#`aT95bc
zgUuW#<aU}ldj4hAd^mFsPN16TcejOKI(fl=M6}9e)E^%?cO#BJm)4*Djx%8*C#7zM
z^^lQ|2=*r=@n;%Z^d(<LalKSF?v#5;7$<G{VrOs4+m_G8dFP#IyOVthS@tLMo|>Lm
zQ>*!PRoz8>x=Z$r2<hdE0(>si+)wVaAa9~OuldZ45}#qw%+-ry98{E-xu4LGe_gh<
zb_~-4IlSxp$jzTwA<~0h-hZz4;@N-kWfQxIjocm0Pt?>TA}?I;f5UUchDh_hI=y|<
z%O`sH#of3-jM;3ZUcczk;&8DKxT_@+cKu%*FiZ3_WWAz!Xz6X8ZT@A>6uKQjj1%Si
z+3)MZG?PrHIispL8+sKa_i?>utRuZszyAE*=QrLrKb$;k`-J$H1i1_|Po>C>7W3zS
zNmzXb?FXXz^Urr(cXzSjYg+G~(zJ&&XX83)TDMhf_bbmm+`n2iO|geGttr9bSDF^t
zRnsQX#?3sq-R#Qb6<%|>l$gb<*6o<xYtacGi!s$h!fFi6U)w&>8=s`mdbzw_Cruml
zmo=>^!5;TxCMdWvh5yFvE<8Xj7L(%3TXw6wMgF<Gb-Wh`|0$wMQbzg+V`POF!njg$
zX+PDqJI;9@Ph5Ls^m_lI51GljLl(@qBKGk?{PD&)YC%sbAFSZ@Z(QH+Sjs;)tnd=?
z?;j2e*wS}`%$My+?-LFY=1E`g6T2_&E2o_C;P&drRc5CKDKlQ)eeJ((+G4gx^}CDx
zY`z3jvQlrokJ^!*I;ny{H#}(KH`vTWamwi-Pu4$4c(a)G|G*?K)%DrLsJLEY|9C%=
z+AF924<X!f4YB3kHkPttZqy_H?TMQfZ`h$cF>PUl!>0p}is?CejbpZ`#k|?MB0P4^
zTWZG2{S^ys=;mwRuDr%uD04g4GRen>dY<ORmDwgYDZ!#8Fgn<#qS4gxGG*C4xxkDe
z87|w-+s&JJ_|;lZbD7w_E77hZs>_SmrQO|ri?4U`J*9U|33j+nde?0g+w`ud`(5j$
zopL>MX{UOlqwMcp+8NPR^`4~d94J}ad+{E8Q^w7_=m7GBGG5u%hEmB|r}dx6ClZTa
z+>I|G_rkt>Ke4dWrJbYxvg$QD%HV{mhi;0O;9Jh_?tH;RZ_#nRRq!JI<%ONy$et0&
zK%gG{NbT_4ENU`8h!~hkZ98-1{_B&1=e}&XSC-^bKO<_$B_quPSL(irsmh$Nt7L^3
zD)0D4D>ET9T89#bkSCjtORlZRxFok{&fTcd>n~@ThZd+Bz8f>E_alF`TOaoJeX-YB
zcEN42iDF8JOzU!NFMVy~W`2JB-kEnrao3BG^IB_8rw&&NzmWE>yhS5>!I!Jy#!9A_
z>yojbpsz%V_98T)6lNmn#m1(Vsno=bd@{u%FF%2tl^LH(&9lr-rBYL=$?c^P%}FWz
zt(>Z+-M#!*wAI8UpE@_K;PCo{srKQ{pN-y?DI4b=ky$W5q4@m%<WY%}B<{-YTkUY(
z=Ym_M`1+XWEuZ(i!|%R*u4*k!vUGpyZLXzx=p@SXM}sywRICZes(60aTW(DBl*%Qy
zXKd_SJZMhUZmDH<R28q-H+kHX72|XsSa|07%bn6Y^v{F+D{Y(!Xovjy@cQlE)7`xb
z`I;-+Q<~f8D2?l+x!qQ=O>=v?i?_}(WqN3iS(ozqS98qpu4-$XSarDYYP!#e7Q5cB
zZ;zt%xf^<z=5}sE@RO?^`q$Q<K6!im$`Z0PcD8YnT&Fpv+h11Ox|CNqf!h8Un$G+=
zrf^uh@<(;C7@IG<4_ak6{Lkl^9q$0be~M_5G!QjmjN+es@N((_?HN8QH{(%r`i>_y
zedlc``&#z=9PP-wOUEs(Cm)s{@Yd~sxwB8ktkgb*x-ByYr$rxUORgPYciw-QolS#O
z>9Of<u9nhI$6H)?nRqIDgK?tCkwsBolisa3Kh4XWeWKC*irTd=W2NsI?R>p>ZNMwe
zgoA2!hQ^vLa;x`yeb3pbifL>kQq+JH%@B%gQ7KY1Ui6GpgjoI!UH&TqY@7J@!1N<G
zdrv*#uz1)+#t`+S>t#z$o>N*;&ReCeU^u{V=!3+s)>{wfu<LEYhZmiAdUX`8B8@j)
zLXFjMC@f=<>=(_X1s_6=*1z=fF^e!ZDKfWsV|JBd$cf1k+l(LLW_nxv+|?l?W?b3t
zeOa%RH1SJ-wy(v8bqnu$NZ$3n6xs*vqoT&z&-zh!w|wQRtyE8`ZC%PsTqm{dwu)_P
z+tZyLQ`;!Xb~9YfKilg6No`NotNqRlR|2;}deT3r>;_{Gq3pVvB>3%0cRu|!A^YqT
z7n`Z6$m~15@%{$K-rDDsiO-$saCrZb@kEK%)0HaxNpAbC8~&GN_hh{)u5FUb*UV!4
zVgAEJsI$V2`nNOOu7WE%@@H~8SAF?_@-ud_BRxhO_jEY-x_L*Oq+PtpH2kI0D;yeP
z7bk5LtCL@rT0K<K-tiK}W&V3Qa`p8@$$K~Bhc}#`QgkN9et)FS*=OO6{TvJSPrrF!
z4cW;0nEm_!i$OA1LhkRnwX*-?=ff2X9^HEV=$Xryx(tIPi__N8J6be1ES6S&S@l^c
zxBQxSbN&(EjaC^P+O+<u)u79!^+-$Yv1`o_;@;8hxf9-g_I&$5Wue%C0BZTtoEen8
z`q~pI8H^V1mqVvrP!l^*uHN!c?qj(){(a=$I5`EE$`4zZ`bMYfV%$|UM>$L|uE{U=
zy|YALVeuyW@nw_3g1?)nCZ8Nuvol3&)Y{vX7Asy%eQkgBjLB+2fB0oj6`i5G+fDN&
zOT4Ef>tsDT96Lx>w^eL+i{KvaFqmY86534=|4Yd_LcR3!38J72eCR4xp7FzCYereh
zY(2C1*sYhJ!xEk7wYAm8V~hG8AAk4Do~e6=&pb3<N=(obG;k&8?TOlNm+fB`t0PqO
zcM`DARs>qLlmF<~POCor`LwX(U5WTlyN&soJ}rE5+H6f(+0N;@%~`{~*6^xpf@d~N
znZh#md-o}8hso8_!b2>An(0kTJ4#~``Kj;SzExM>UZ(f5Ee=$eU@QLNqjSZjLq{7%
ztMnPmabo!5sMQ0eKZ~E@KP%5)@ovq`yNV9CP2G#uD(~50HsxcP>4{lP)oTq7GmF;G
zyILGP%`o6k^(mg%xNxAl4stBmfV7ID^;yO>$Zz$)>N!o)$HUe?eb)3$qqpr;|3NYL
zBsPDgh3U<k^cqK5SNtt(<b&FC<#LB!mCF`y7FS$*;lu3Fk3$ZQ%hTRg^X8#}b;Sey
zhSzVGzdR#@Ympm2NhA5_?d4}vRn*oiY#s1w?WWfkWkz4Km_DvV&{KcXExT?1Zti8z
z*Cc#TY0?quMO-IM>b8n)n$**sM5syf=BIHsMp8KTUA8#$0{v9MyZq|hy*c-@D>C&m
zEYdzDpGo>aIiBz)L3eaZ?2(vz(d7~K;onD|4S5uz9Mt50!0(CgZtp-Zwx^f7zZ=ul
z!$obF(a?|~#KFyuHyys)pS4?HJ(IKxDK?vD^wLNQ{rewU82|tP000000000000000
z00000000000000006J1cDZ=;6Z!U|=HqGw-H<!Eo7zB})MI=))DCm#l$bId4L6>v7
zQDN*<kNb$N!exg8k<FKjN35Os{yGjRwbs-}aFR-uxY!8;ig4KVvy*%~{pj*vzIhdY
zOK0J*Tcf5^v*^?xH?LaEe@I{#a>;%D+3zm@q)i0h;<ZC;tVtwClC8Di_Eqhl{`CGu
zNx4~>M66oBbNj0E```77&s@GUr|QC`m2Yx0k6aRuyS}$q@lKZG(eLw)9XdsNnsiUB
zx#{fpO7gNJ<fB(!9XMK3VYg@18Xr5tjRP4kr%R|+R?t$uG<iNTPq}lM{8V;@Q|?sH
zcj0(@|J|7ni;}fB6^^WA<?g4eWSAViGG^BE*ja(L*XWTNa@1v7SFj7d>X4#Zq^K0T
z;A;%RE$-W)Z981AW!us9n^$?6b&Nv4Xl;?1MW*~`7kUMiuKiMJUcKPO^Ua5s2REe<
zE>2mz^5a&!;rr)(nn9P*JuzJG=D|S$Y88jK=V&I=OtnmNt*Yd#l%8%YB~87Ymp9SO
zLI1tlxB!K?f8vJpHkM$XYn-s_cw>OkQpw9{p^72YiF0({9o|0g`IzZZlQtO6h-F01
zOt-6Uy1eyh_Q6AIQ_!yaC*$%@``I1Y=?3<h?{g+j^{hVKPu^nGp^I1W#R#v5zRAoV
zrDeEI-(>E#if!Ly?&-nMdV>(c-v42{0RZR$iV=2CNgdu{4X%^a*?*od`;;;w?%PI#
z9XE}mj_2lFJJU|;4&S>h^Y*Li*6@Ms)DufqZBV<b&bsRPcIiRGZFjEwTQwb<=bA(w
z#=3d#>5_`6mz`y)E3ST2x)_$H{_w3;?Sa`9VHQ#^E{*Izag+Ij<O{p03JR|BJlY<g
zSBKuaeKTFT{_&N;y~q;1`>sfEb(Ow4N2}rS=9Ak-eAjOode-#p_>*aCunWl|S#6V5
zxBqamYSA>)wQaKcldGJ?#6k<YPEhNsRs@!W=5I}|j@tNEFZImwcP$df6!AN&o;A*%
za8@DaUdYWeB@#?QcQD13y5UqhY@F}kouBeI&IKp@jc1DB$6d%S4F4=DdRdv622zYK
z!e*$U1)XQ8Kl|AL;jGk}WMge@GtkafI4f;?is+EE5lvyNvb#G`xME@ggGkMyTKwWV
zv#n>pRO)M!ujJh{Qf57}Jy<`|J8i?+_04<Z4L+C*bqRB8_-s0I`v2G5dB;=zzJL7K
zJ3G;^_vjoeBYW??v)7@MnO$TZgh=*CNQ5XfY$YS5jEE3IR@p0s-#O$Xqg0<y-}C$9
z{m0wm@pi8JzF+tAy6*RNzpwj)LgonV3AbeS&}{Zky>jo|t<(lFGa?fm+llSUG5Pa2
zZO7u19v`tzSV2F%di|8*D`Oh=t`4rQTcTEP!vwCG8x?bQAlWwRqFFU8^PWBvBN(Vp
z56L@1ETZuLpvDy=vwf-w(V|{eC2vL^bj~CxIkM0w>dHm$Fs!P!0;Mk1Y=asJ;zHb&
zf=KFP)^6o5V@9GS%9J>6qgcyW;q>`Ds@34CA_$2f)b|hyWT~c7B94izZ+L&_-j(3B
zw4;GX#zNJ?W%8xKRTg5?rS`>Kj8w&=rDpjS67n+Gg_mD!e9d&wL^x=S&-m60QO<u>
zdQ_8}9A}M+g~cI+0*e4W5QIh8JP-ry!s5OrZetPALfkrP${kT%Rtb5xyURS9io52;
z3O_XzMJ`n>*c8}~f{4HCvO<0w4*#2zpHfrpPPO`;>iP;mLhi?Ulf{CAM!pd8F8jua
z=PT5(IMU_<)v=Dz<^c`qcIF$4gLex-yzy)##ndv4{S{*`yKsX$+7GFE2e@E)(7ZvF
z<6ZN~?)Cw=5&^N4@Jy@)SgG?$IL$wPHo4eDgY)(6Yo`c0*$k1sCA;3OTG?)hsg+F=
z<)ib<wX$tl_WF`527(n~1dgSt&F70u;`^U+@*8TQ7x83yj3Ng$1#77WC6!r0@m#lR
zW%KT;mHn4b8-_Jc8?eil?5dSb2y-c(-&~3<%b(QB27!1vL7-EdT$>*(Z{O}bz*cH=
zp}7GZn_n#p+wiVS-XIc#Dbb(7f6l71gLQNzK55Y!-1Jya<HJy<jdsDaYn}oX)fK_@
z#3=>-N6$18yz9D^ZB*fMXK?7Kg0}m)!`Z=X;l`Ks6Nh>Dxa61f-%5U(O=&&h1*X8c
zos6C3q*~?e!<!llZl{(i>#<<45sS3z3-W;4d0`6Re@fYOE&4#+jgkZ~*MbMc`OdZc
z6<?C}@zYv0^C^Bx@w*oika=i7lDMOZlwLB0%mh+*=tP99+l=5yhV@^%b+_aQ%4xkE
zp5V0Qn{UCk{TK7Wh5nb+IvT`ol5(CJb*w|OAEz>sGIF4a{?Ny#d<y6I*=XT0>+Wa8
zWOyyY_Ja?6&sq=*#aED@Yei0Q<T_qVRA8yIattn<gQvo;4K5AI9S>o?b8ELoNk0)l
z&0p8N3B3mcqzi%o37ZdEfL(yx*Tii=B3gl4KIJ^3y3C1Odv}+)8DP7H1!6Wv<m)aY
ztGfCPOOAGb*JW=#Rc|b*Ukve05xq)A%Bee=D4#D;qW=`*CCCz)Ri-lTWX=WGq$HEi
z-p5NylB6fhOu;3ha=E&;AD}cCpO1T*Jnl988juz|90+YNI@J@c7I|^tOX>p2ag3EH
zmw`$n><GoaYB71PR42=)ipd`N*CyO#N7mT0j*!@2cZ$j?*{Xx)jF>uTL<Vh92h>3$
zUE1qOLQYLI@_UCK#-}niqj4>XJt}jv(C>A+09|pOADP@7>S-O*q(F$%h79BZL7Kbj
zpn3jXPXcSyRltTPadI|g2LXY6>}M@KoNYWUB`qPA*08B=p#eWh4qk(@A9l%ob19_1
zQTYM{<N|T?@BzP7pxnL%@_@L2pv`Ak)HTGY;J;6$VCg}n0W)B;kl;UNP^nuwJJ{P<
zz+asw@9`{`VV(tw>;t%Gt8;7c-q*P-hCuFe%r3h0ZrR=*VPd?Q6xETUrP&DVV_@{t
zDP<_$)5+27O4B9GOHWWC!^MmyFS)z$%4$;DzZ}+&W*+d&#cbnGHbR~@@B=d1s5*Zw
zkUnb}QB4s@cTDQ=l}21Ew24`U+Go%EXCH=>0OEQ=$LsW;=Z$Q-6?!1;E@watzoSRR
z1!8ac5frR_JcPuu#p(L~K8{3A@cmUs12_CD6gSe*r8}*f(y@fS%ogy_9-qk}ATc9<
ze6M!GqU_7Wcu(I&RHhzjF`aYIP*Ny?6<*f<&U0FYeF5cNF8#0OK5^Z@DBChz3`ke*
z)$)LZUv>|2yd~TlS;^sCcqJvD)~wr#DLPqu9d}Bjia@I#E{Goq`wzzoGw=E<4ZVRA
zF8*jYD_f+3ROYy#NPZlSzeYXG|C)L*xkmzaQEy)px2cC%MQynW2L!nZB8~~u-5r+p
z#Sha*uSM3JR<n+zjId3EE`{{F4twxuo$RE{9N$Fwpu+=23n1aAq$DbS5LaW@i>Pij
zbg%_x#fs2^Rt|-iv`mFIO`?bUK*Ra~+A++Thf!*8jm(X(n|YpUc<MzPXsNIT(%Q*~
zjU)9d3fjF(ZwLeD`HPNFj}taar%oYNGn)W#c(nPcc>@o5QQpk<kvL=#*&wy$ChQS(
zK6K3#=l*U&8?;e`8X4KxW3QXIl{Kt!^%9bwM^`J&9jo?pnOCqSWG-Atdu3xi?%qw#
zEO2*rJkZ^4Lk4Uc3yvL)QvS;)+SW{g0J|0(+Mtap={uJi#vVWO3*UNRM@1w~AlLU5
zk>IyLO3-oO(amQ_cD&Kp`UgK-Ta3S2dMbMvouFCSbjjW#{``y|A$pO01z4m;c<OB+
z-H_x&6Gpu(HN`M;!a8d^F(z_)VIlKj+LW6&*CXsgq8^fS>OJ5*8@C1yF>lKbHFc}<
zgs5wdWmr+(BX{@UiwRd0qOo-y?7QdiLCK{YH@PG?hU-!+s-nbXKl|PD_S~ue4_;ec
znx`xo4%2RXeeFGW`som6WvN^g^-8l!r6&;rj+m1d^@}<izA(KaFIteR%=g2+VD(l=
zy_F+E1PlZ*HpN>+jNc*jd=qjlC$;ePdF_*_T5PP3iEXPyo|^?+EY`E5)ub~FA#Y_M
zMZU}?uT3Ox+ZQPGmXz-qJ$5)jL8=N1Mg&|kKa&1|gKNUW{PEs3XxqED=4T}v$IyIH
zj+w&<cn(o#)YeP^0lNseuZi0PM6?382nazC0Uxy(A5<{deJ=rLtBbAcg5`3W?Glx9
zmnq(VrF8)iHDLjWml-4LlQ<GB7=d>J%+GEWgA>?Az`tA!4%R3mzy<+bzi|)g8qjwY
z-jv_10mljC+(|snef`8wA(xbHa$ZSo*ftK;-w9HZ&Gp7U`jE=H#)*4%STY?gVPE5A
zFT?^ephIj)Ms(tDh-d8_rvp+P{a3<o8i|XddkXXonX^*l(KFHLKF5FlTytPDn~Tj$
zHE&jqO_q$Z#h<9n;+0wYM5wMR8!zRe2y%I$jy>*G$+nR;{h5~Bj1O%aklTkmTpa@Z
zJ<WPFKE&FhFTPlvq?%t4IGhWWRW3puCMdyJxlsG4Pfv)iymxLLU)iw0^(o$nBym`I
zi@mVvDK=!O(CMQ(v*h^UCtii?E@D3QI{YZ!`60W<z@4*$x9%6tFGxnU*H)lY_u#o_
z5+!BNOL9)dV??&v1Y^|Jug*}Vb_T<T>PM2>uamWS?m8(c)qX}fRncqN5ApGSZlM5!
zjV+>J^QgrTunRW(nz#)cL@QwnHZ}-?P2s%tL9lV#3!5i5nPozfAAqz{WwL$FNtA$+
z+8U8>K78WqFr7*2db=keWHbj#1>TT>@<y(3N2BciGHeRxtpFRav2%v2RMW%3Qo_mR
zybUZ2fS-#f<$fNv^3rlPwYJ=qJv4UvFKBcU#13TLe1>k@0;(+&sNgnGS$=24&ro$u
zoV#V5ELWU2F0(38p_OecO7S?S<Xt_DYobQR?v0sdI5!^UAH5`7h@EAiNuIj`a_|BB
zoAHg!Ma*a!SMrBSr(g?$=y7jIc}n>uP(U+#A|+m^&Kf_6>VXi)3gbLbAm&eRuJv%6
z{EEiP&Gj|B)72HNUW@tTEy*{dt7zoUHsdi9pwX|zV<hNUCQw-<=(0F`lC7hnq9CJ-
z9=x944~B6g_5H+AbWx+LT@vaU^e1J&Bx*0p9cd~!Z=z@ptq!{_nG<GXEBXkKymQAW
zFFNx%YL?Z7TWK0kmq8t@jx%v`Sv*uuZL#$ceX((3#Fdyu3wKf9>odK*8Fp;ielCiG
zYj1mxn-D?*$*qB_WNdx~%wnvj?(@l@2Pk9apQi@kQu@)9`0X)nf7DptO<`BWeVu8{
zO1)lXUR+%ZMoMc$k+N{!60nPu`<l2-N<<5Bi<DLfB4u8Y{z0VNXIF(nboV3c6IGB!
zZwCwf)}^cKYrKQHIPPQdkKdBl)2tfhp$F3knptkhfEN(t`M*6m8`da2z%EiM+n?W3
zF^r6Ju<Ohg9rx_5_!ByQf7tSOGY9sw|ID7B0`WOgH_5XmyxeDHH)<6q&c3G<k(|XY
z5#;dqnbRyiJQDUnKGg>G4t30<Jj}utRShS;m)BZlS=EjhXn1;X^9_kmQsEktFI3NS
zF}*+Jt4SMJDDnb-BmrZx`ZjWrL0w0QQfBT)GL~gZZNj7Moy+pC*JQ&VcRCqOw%_;V
z4`8@aun9z2p!BZ+k?=bp?n}eH;PX2|E`@m^4fnPlPr;A|!%b9DQh7EMJo;FrzzZrt
zo#FCqZ>KaZA<k!wdU2_&$nh3ZhLORl9YJhEQwmNO)Ev{B6W*I2ZLU>nb`yO)`}`d@
zyQHt7oa+mTAVY^@o6zT92=j6t7!*yTC5Bwp5yM57$?#77n&oaTX}q+O?)waWFzS!M
z=lUzdXV6%EuLr$YrMYf~LHh9ILoqRhY8dM*5XHK@B3-~P*6nNJHtP_ru`Sk_BZzew
zt5^rI&Sfv_mSb|inD-kKw|d3gt<N)9jlnn}8z*)0&PT#m9v4r|6{Q_gr3utG`*tp3
zkozvy{pB5Gutvd;F4{LLgh6f=b{TAe&gJ((2igfb(9X?c`-BKTh1|_BwdE+WHa7b%
z3<#4T<LWs*uE!TWD^+dsi7wQ+#v&aPm`ed`CPL3BgukDP>A89<R8N*0LOYI|jN<7#
zIuhSPt^uf$8vs7NK2bh1hsl`S1g`9M9p#S>Xq!-~?W?VwK+^}8xvv8w5^e8C@u*VB
zEv^Oi3#=R926Ez?M<Q)PP5~(Q-$i|UIY%e5!c}fitD=h~<L=t3*v~xX6~eQe5^;`V
zLb$E+?Sc#0be+xXbnNFmA-4e{1=ijwjiasOy&nf9CdXP0PcW;sCE_?x3wBp?7IHmL
zYA_;7l;dgWu$u3leG_au6Ip6=`eafS=g^8gdtvXbIWv3Ha*7t<leWVT=e}H-;`djC
ztKvuMK4|nj-_XS37mN!kaN8QF-}|yy+!@0LW1K0X7?-gM-|e=8ar>IM%{W9$Y-^8`
z31ap*9Z6X_^UHgjjL+|-U73G-<2#APsnst8ZrMc|x$P{BH)MK!S<H?sU2-gck5xAY
z6^61HZwP`D5DeM1$I0w3(=KJn0I)$j8#_}AOGg)2J78-Oc(!rlR75ry?qarZcm7W{
zIQ<xW%pgV}{pQmr<o@~f?QG}wXCwYN7d`uezG29CaCy<5a)_H%P3Te9kN^`+IVbCY
zj}|+sxU#Db6xX{;-bN%N%!4khMH}qy6E{tbMVcH!6n<Dp%x^7Ha0msrR0idCw~AJR
zqg}R5be%yT#j7+S<awJ|j3M`gXbNy&Da1%S*q%lveLyX8Ksmbliobut9A(kB-LuX>
zM<Dwq02zREel**C3D5Jh!xR1NmX?1#A(2ei9T|V@<hlIB<!AiBR4=Ig8O9RaC$BS(
z3;E*d92IZ>+$V}DX*l7T$>kX9coLdLAosvtcC8ljC463=oEAfm{(~9yy%1^sQfvF@
zBBJv_*C=J9tW=Z6-HNKIGi9z<=FNYMOC>MzZaIfh?J--EbG;>=+d;;Wg7~!TC%Lu^
zxS$T6BEK>2CFr>Qkt<=Pn%3oOEh><R8fA~$NPZkf2+C{2CJP*zJLtKuiQDu<tU9;i
zLqi0`hjHbB2gQfZdx^;~Lz99V&%?XU8JE&c^$}N>`BM10-34T}uF}f+bG=atVF|v0
zs%JJtAPfi+-W4BO{AFUsl?MPeh-qeOq41+!JngVcc#E6PzaJ(7chVB54`cx`0U0)*
zp%gc@p!)XHzq@rO+fM&T#;wUQG<=XTlold*+3==QdFiL9^6U6Dw^&Z-mqcNGxHoVX
zoa<sB5Oep)J<|`f_@XD5*_aDNamJzq!RGXbd}Z`(sP0M_`V<yFeMbK%0(ANwf#+Q+
z?V2Z23~3mupTx^-2y>4fYdPi*Zjv2PCNt%$L7Ds-X7KQi&%fNd!*vMbUAy?P#wwk~
zPq=caHPL?97lW>I)2VhkI%4W1r|GR-Q%-d=S;GoZuc|Ra%jGXPC4^0eTLR&$44t{}
zOjOKpg9f5i7d4i4ilVl@?lW{{DPL9~X#A2B`tv;O(#)~qCwL_CZmc><qV0zkLS2{)
z*Ipk+Ee#;Z3h!ih|ELNd{~zi2cLs>s>K&O+tncur(|8riLzT$ONrJ^Nt{EVTYjNfN
zfL&bM*TikEAy!6PT+>Go*CLxg9>g`Ly<CHiL>?P=apqlFHtZyErJ;(8<u4Sy(&?;<
zH83UboUfKU=}8S`)BE<0FZlfbI2#h#JOS9?nz<>vi?gK#yQwp~<@PsFe#k%=(-O9r
z=Ja1M?fbXmd%wtr8$o62{HteVKd#d=dXkamXB3|~QF6vaoFYzYaB6Y{Oq+vq^@`$`
z_HuiWpyLvrVlut9BDmO_iFM>v&Omo`zrWU0+e!z-aj>6Q<L(L_7CXRke1vfLnlJG}
z*j&Km=U1BiP;B>1?LuZ0UpL%K<I#5ym-<bVa#lpWO+RKpwZ_2JA%|n}=FTSD+<~q@
zw#`rwhB-g#eLM4CM}m8g1lunjL~RYJKg=>}wu0M~kqD(+ICLHDC0R!jJ>9~&7S*mJ
zQLE8pp_#>jhY}Y=Cu<*j(ct9W9$@E)%11iIapS!>86U6zqsvDb<@u<<uW4T8H_D?@
z5%aP7cuk6FMVb4#l?x;X0z^r0iJBeF+BK}S(50afK$5s@<on+D0_&(N7Z>2N`qA|G
z?XmY!^U@sUD+KFD3!ihf$m<56cG$vJ(z=LRNk=x119mZUUlX^PiD-d-qo$M2HZ@)U
zm(;vm`*NF_Tp$qe<mT`*Z4AGLCBzE0Qi8=#7T*_JaDykvB*duBJGsDD4~~1W+DVwa
zIB=#l%`TRIh~@UZQf7TR5{Gtdw(!6~ffHwylhM*d8iH`OH*_Kn2r&YX>}a*?U&iX?
z+9tpTR-LyS$Sx(t4sRH{xfnaVVKBJDE~J-RaCO`b*FWj4ohKsl@b5Sg5qA4$|MX`B
zZd=PZQi}aTpNnQF)so^af$NZw?ptQv`VJzT9OvnR!d^l`3L{si8N$iY_2J0(F)39@
z&(|M|z2ha2GISSuh59&rHc%tlAXQ0L<QPq&tEkRv2y#QNSH2!w&au9lG%XY%9fOe5
z&AjCEtZ`r=HBb4*b`UL7G6k~1*UsbKT^ipCsssUj1AqdX4CVrY{7!z~^V<;KF#`W1
zB0pfjj6Lpuc$|}c*5$g?bW8zD*#aIhyGmv2LQrNw701-Pil>M4;?%9ck{j<)n=aC&
z9lEyq2Dh~--mzogjo4AzP%i(s<kutJxJsW`SzggK!JS333>)hqbOW}M`I@Gd(k+F>
z2b5&`k*dAxLhi&bJXO?rpDeyk*0HBYQD?meuE;;0dVlmF=Xp(T{+2nUVt+<((HC-q
z)443ZFl=if3fq@!UjTMtdtVc`v5ja|Zw0%W2nu!sVzmwmb{+OodC{|}WvJH;d@Owd
zVswFAJ_RJUYB`G?9a|<$nnq)A=Oph@T_}czJG@Q0fFRpl!LBd%U&eAktR~>wdrwzW
zh>gXrCA^N4y`A-r4M0c}uuF4`&<?+SB<(%`76J(Z`8S{8{1yUj*s|Y}k!r)DU)~Os
z<F!haL0X|jHH62&Ufb}@-2I{H{n?wj#Glo*3dHKZX0T^xRz3N;I6`I>p8yof!jgqD
zy`#wI5wA{FMHR3Jo8TiaFT3@OQ7G@S*qX&_Gc;k8`*=9jC4%^TOf%u*lV7l#NL5{f
z;@+3Y&x>YTQ<Cv65@~n@3{GLuN2<?zrT)f3A7vj-N-gov<9obRbdw;&0Z?X1-w1ld
zUb~1H?vyZ{-EoVZCJ!{K7vhK{aZLf_WW&?<)NrUZXsMAws9vXq39B_}<|@N|Lt7JV
ztxry<r`5Y|>#Rv#o|O@?P%ot$ABF_9dkiU6Sc=%MO!YO7uyo14ps!Jz_;jo+>%#?T
z!!(pHYVX$S@3j6ehfPQ-_6ui(;2eHV-ti(W=<Qg;$!Qo6)e!~6fLIN{E+Fn};x-Tw
zt*tE}sv!u7-VSFD0;2t1Aa*pL)Qq@rBt10XM3bynCFNz67P~S*+~Kr2N&NuTF3y~A
zR~#ss>IM+c0D_Em1M$#b2BNpaKZ&6IfVd@J2`32r4>oqzFdPoUF6AvG+W!|w6afhV
z1vj7JK5%ZG{bm!D`L<C%gW{bm2`-Kth-_5$#i)vsl$nMR-U2<xgwO4QPIkd98kzzb
z4O1Re%XJIVZ)Qm|xX*bQPLm1L&<!y_CK)7!Nxbdz5?rN$QY(N<?{YDbDq01uk7f-t
zok?dqoM2lvL8NGVGB1<lxM<A#mQO^y0T)StNJY=vFN7fz+?We0AbcXS3B}{Uqr0Gp
z1HZ$EXTy<@_kkhg1??3#WAvHN0s3djyp9}cdvdw^YW)LOb`|$1_2;v_IJG|FGIeU!
z7c`2NZPdu@OCA(a85*U{p#d7=#`-hj?fseZ?tCrv4^(mB<3nwu)RcbGxIVEYCO;A`
zH>h;Hz2fOJ=x5v*oBq!qvtp+8=>#V}2VM4{9D&#+kG>ztI{}x+k97X82TbbH{qSdB
zncd`X*kB38BcWg8uhN9!Pz6yq^mf>j;@Q{4Z5$$6Ra*&iWdtS2-PX;1Jwa}_7mP6~
zRvyuZFjK?g4TIftgRfVhEl~;)h!PFg6O)s4E1%^Cb2UJZDs4rI-n$aye?3xkTZey}
z`9m;DJK3MxSrr6n0d^T}VbSi-lja~EzMX*N`^}gUZrjd(|1&(s`e&;Tzb8${UyZsk
zrcd1=LWfc1FV}BGmIZ3E>Elo#H6TYFN(rX7B1bO9h#0KqUThz85t!#@h4_`+mE@&+
z%*HAmd5wbjS)z^fohP<E-M(syMP(n=M0%>iXHs477gkM5W5;p7@f;|!yTd(v_Y1wD
z8}Kz0QX`++aEtHN<A0ePqBUK$_qyX2(>vxSQ5Pl|E>j?=9Xt4>X_5A|wiIUD71dg|
za{+wPc{El9s{A?H!<q!L$;<h9T*^hEYjjbE*CrWzsyPllVX7c~_DYJIPmM)IA)K-H
zDrvZ1h(T$Bvbe3&2ZpsVoZ}H}62c#39K0*nKVqe$_ZD@63tqP7k6(a`<zW5)%K?;l
Z^C4DlJQ4}>;!vd_M`ybYUvL}J{{hTH+&usQ

diff --git a/security/manager/ssl/tests/unit/tlsserver/cmd/BadCertServer.cpp b/security/manager/ssl/tests/unit/tlsserver/cmd/BadCertServer.cpp
--- a/security/manager/ssl/tests/unit/tlsserver/cmd/BadCertServer.cpp
+++ b/security/manager/ssl/tests/unit/tlsserver/cmd/BadCertServer.cpp
@@ -53,16 +53,17 @@ const BadCertHost sBadCertHosts[] =
   { "good.include-subdomains.pinning.example.com", "localhostAndExampleCom" },
   { "bad.include-subdomains.pinning.example.com", "otherIssuerEE" },
   { "bad.include-subdomains.pinning.example.com.", "otherIssuerEE" },
   { "bad.include-subdomains.pinning.example.com..", "otherIssuerEE" },
   { "exclude-subdomains.pinning.example.com", "localhostAndExampleCom" },
   { "sub.exclude-subdomains.pinning.example.com", "otherIssuerEE" },
   { "test-mode.pinning.example.com", "otherIssuerEE" },
   { "unknownissuer.include-subdomains.pinning.example.com", "unknownissuer" },
+  { "unknownissuer.test-mode.pinning.example.com", "unknownissuer" },
   { "nsCertTypeNotCritical.example.com", "nsCertTypeNotCritical" },
   { "nsCertTypeCriticalWithExtKeyUsage.example.com", "nsCertTypeCriticalWithExtKeyUsage" },
   { "nsCertTypeCritical.example.com", "nsCertTypeCritical" },
   { "end-entity-issued-by-v1-cert.example.com", "eeIssuedByV1Cert" },
   { "end-entity-issued-by-non-CA.example.com", "eeIssuedByNonCA" },
   { "inadequate-key-size-ee.example.com", "inadequateKeySizeEE" },
   { nullptr, nullptr }
 };
diff --git a/security/manager/ssl/tests/unit/tlsserver/generate_certs.sh b/security/manager/ssl/tests/unit/tlsserver/generate_certs.sh
--- a/security/manager/ssl/tests/unit/tlsserver/generate_certs.sh
+++ b/security/manager/ssl/tests/unit/tlsserver/generate_certs.sh
@@ -274,17 +274,17 @@ export_cert expired expired-ee.der
 make_EE mismatch 'CN=Mismatch Test End-entity' testCA "doesntmatch.example.com"
 make_EE selfsigned 'CN=Self-signed Test End-entity' testCA "selfsigned.example.com" "-x"
 # If the certificate 'CN=Test Intermediate' isn't loaded into memory,
 # this certificate will have an unknown issuer.
 # deletedINT is never kept in the database, so it always gets regenerated.
 # That's ok, because if unknownissuer was already in the database, it won't
 # get regenerated. Either way, deletedINT will then be removed again.
 make_INT deletedINT 'CN=Test Intermediate to delete' testCA
-make_EE unknownissuer 'CN=Test End-entity from unknown issuer' deletedINT "unknownissuer.example.com"
+make_EE unknownissuer 'CN=Test End-entity from unknown issuer' deletedINT "unknownissuer.example.com,unknownissuer.include-subdomains.pinning.example.com,unknownissuer.test-mode.pinning.example.com"
 export_cert unknownissuer unknown-issuer.der
 
 $RUN_MOZILLA $CERTUTIL -d $DB_ARGUMENT -D -n deletedINT
 
 make_INT expiredINT 'CN=Expired Test Intermediate' testCA "-w -400"
 make_EE expiredissuer 'CN=Test End-entity with expired issuer' expiredINT "expiredissuer.example.com"
 NSS_ALLOW_WEAK_SIGNATURE_ALG=1 make_EE md5signature 'CN=Test End-entity with MD5 signature' testCA "md5signature.example.com" "-Z MD5"
 make_EE untrustedissuer 'CN=Test End-entity with untrusted issuer' otherCA "untrustedissuer.example.com"
diff --git a/security/manager/ssl/tests/unit/tlsserver/key4.db b/security/manager/ssl/tests/unit/tlsserver/key4.db
index 2e56f4b642f16a748a2679a6c03ef1e9179412ec..1f033ae4a079ebbcf866ee3e73a617630a3085b9
GIT binary patch
literal 458752
zc%1CrcT`hrw=du<I#Q%4MT!)qqYDTjSm?bsK{^RVKtOsY%P1BU6npO-8)8>fL~JN3
ziilk-h`k{wD&8cU?*#I3-{c$Tk8{Vl^BH5Wcj=G0_S`eLUP3TC(BCU5J6<bcMrJB4
zTg!qplZ0U;J1s2|iS&Z?k1UBxjP;MmfL~)I{$7wwJH%y(-z15`2vV^uak=Pf5wpm)
z@K<3(VWR-`0000000000000000000000000000000000000000000000000000000
z0000000000000000000000000000000000000030tE7mFD{E+AOyg`CJtaOhKAYx5
z%clKnm2eDjwhwaF3bJ?ba@P9S?`jz&#cBBkxO>|Nglc&@hiXmnard9%tmW&Y<>>3<
z;^pobq!r-o=VkBcY@(Hv9iM9U&th&kUP4USQ3E3-rNzbPXJw?Yem9zylRbm;>*#-7
zKiceHXOa$LV#><eSUBecVyDxR;?lCR{4$erY1#4O{mr@iI5|(%;)LuLxF4WpKr_S5
z4edlZ*9hTUBZWqfPvL%u*r020!hgGlg`taxn6jES7X44#IrQZC*lg~Hhz`0&e>_Ad
zW`>T!V#=!j`magK%F2n)<bI6Epv(M|{@YckW`^@9n7FdGHnzx$^N?|4?wQb_hi%{m
z_&;#=4!!|FCR#L{^$+WDqnWe*v0$HbeuMoxX6)ahvVTcs|B}l2CHq6DWcI<5eW0)p
zR_p_neXwR9XzT->b+G1K3jgQGxgu`PIsWtSA#;wFoFj#EwBj78oTD}8NaGyooMSAf
zv47h8r$5fQ`9J5JE1Pq!Y|go|Ip@meoGY7iu58Y^vIVEgf>UL|sj}cyS#YW-oRq>z
zDV&tTNh$xNoNH1z*R<k%B=w&oXM&vnQgi&Db9Svcr&}`4V$Nx~|CBRp&PQ8tKH7rw
z(PaFekN)Qa|M?vY&XLSHT5^u;e>a))ZzXg7tz^#QV#%qs<kVW?|NIWSHa6bUf^1=F
z#yvIXo(}i`GWXPydrIM+T5(UQ|8+{?mQlE66mA)XTSoa;8HL*ph1(8=+YW`>4u#te
zh1(8=+YW`>4(rsKdrIS;(z&Ox+|xMjX*~Bd;lEBfp9ue)(z)%>+3mzx((pJsXW~?x
zgF9b}wV{QOn6j((|Lx|-{Zkrk#yuBi-J(TASqF^x#lBt3{IdW6000000000000000
z00000000000000000000000000000000000000000000000000000000000000000
z0000000000000000RO*{9yN@0G-afa7&(j-#$Lu&;s^1G=pY^wEyOjVo;XQV6T66w
z#0sLEm`xNC8AKuxO#~C(gcC85FeeNNEkc=)B}5s&8Q&Oh8SRWV#!bd0#u>&D#u`Q?
zV;+O?KmFeb0000000000000000000000000000000000000000000000000000000
z00000000000000000000000000000000000000000RQii5Ej8ihCN$i$~nQTwwtg|
zOrI^WGv=I}O?hm@KG9i91Q~KpGF7J-uul}i?=05moQ!)HqsKl`x$tTHSkB3b=7=$z
zlbWtLUCznA!y!7HlWl**v^ggmdP220C#z~_jpm$G-g=|SIazS=ng-{jbY*}#=Y)|S
zs>V6V`x`xqbCNMBOO<ny6!ubua}rDHQs$h5Ri9AeocO&h9LYKH*j71$bK=-uqsTd#
zRJTNdb7J}PsXXVz)c=hf=R_~=_HfS0=%`b&oD&t=bs5gd@V)1xIVY0UnNpk+VVga}
z*eA-rOA94ACtYdhBseD@&1Q;oPCAw>6XTpbqmxBBCv8-55zfi2#81MUlPh-=g~WwL
zB$dynH4kGwE~bPQiTF+Q5MPN8L?`irctYGKT8NuOBXN<aBTf^?h(p9aVi&QM*g&i%
zmJy4HGNP0qh(aQVNGGNf2?ULZAVP=$!kcg-90?o3njjP72_s@G>(T%K0000000000
z00000000000000000000000000000000000000000000000000000000000000000
z00000000000000000000{udAtCSj)Rg9-a!%sv>g4~Fc60sElOKIpLzW7&r>?1L`*
zpu;|BvkzMA!)W$FlYP)&AJo|gHTGc?`=H7`sIU*p?1K{fFp_;3!9FOm4+`vqJo_NW
zJ`86cWZ4H9_CcC`kYXQ(u@92$g9Q5^&OV5-52EaY2>T$+J_rd5lO%_+{u@mhYe>XT
z;tTPHXeaIy&BRsWJaLjZMC>895Nn7fL>a*(3Wy9MiJ%dogg@a<*b~--8DU6h6RLzf
zAxU72pNubzH;i`1eMU3mD&sukB;ycc4`U1K(f|Me0000000000000000000000000
z00000000000000000000000000000000000000000000000000000000000000000
z0002~JH&+*upOi@)Be?@e>Lu3jrv!^{?(v=)$d>R`q#1j>zMvkw|~{?U$y&Jt^Rd%
z|Ek%)YV@z_{i|C4I;wwF?O#>;SLOaysec{WzmDi%75i6({#CwzmFr)J_ph@3t4#kY
z-M>opufzIR$^KQMe--av#rjv#{#B%Z74Bb!#Do<j+1Fu>+LW<|MEoSa5O0Wf;y%$#
zTqVvECy7JE9%2izhFC(B5lo_h$RLsk8WBqP6YhjPVNIA3hJ-euO2`wE1jhKu_`-O@
zXlLAKG&8O;&NEIj4l(vHwy-V@0000000000000000000000000000000000000000
z00000000000000000000000000000000000000000000000000000000N}r)|Nm2O
z+P|9gug3kWQU7Y#zZ&$f`u(e3|2npR9n-(+_OCkqt9JjY)xVDJUp4zzjs8`=e^u*W
zNA<6&{i{m<s@%US^{*rQ*Ae}zV*jepzsmQoa{cS@{#CYrmFZul`&X&{by)u@*}qEk
zuj2iySpO>8zl!v)!u_j|n6QE*`#P*qn-;An6`M2k7`DZ|#U!G$#H8qGi8CQyl2;N%
zXcd<*?iL>`y21EZ97k*@R%I+GdR=^_M3IqEQcnaB){Lpeo{Vk9?Zi!n3{hIrRlKrf
zPszig^^96#I&rL|@_+gh2><{90000000000000000000000000000000000000000
z00000000000000000000000000000000000000000000000000{BNNmOvc)WEgnlr
z?anBxaI0_BkTH!qcl(|xJD~hpJ?w3~OLSk=*u#$v!Y*ZIJh*1U4kDPBCy(y>>3!nD
z-u0`diAYM0n=EY14hou%-0!ll`EccMWzV_qNe7cV%@mE;fzF8i1vb>wzMY*TKgi9E
zZMkr7;UPnIkQY8Iw|tI7<KhETe+c>I&U)q4`OttJNbK8qGcdGWGiSEw_Os2-^L)Qq
z%++THTYk-wAVQnnVs(QqjW{iTCveP$k$UVP#?tWpp=ERLJb4g1-Kp`7C{tKHb}T!X
zVp*N(?S1j5u+^Ez@y}8S#<e)lG3?;(iN?zhN2MJmZ!~z55OCSI%OPNjE;|TstUL5b
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
Kad!(h*8d0ZbT>T!

diff --git a/security/manager/ssl/tests/unit/tlsserver/unknown-issuer.der b/security/manager/ssl/tests/unit/tlsserver/unknown-issuer.der
index e3c286ebc8f0a9653c1710560b9eb3c99ad7fa58..dd82e17e95d9e5b587756a8f0bda19a8b8f4e478
GIT binary patch
literal 672
zc$_n6Vwz*n#KgLQnTe5!iHYa00WTY;R+~rLcV0$DZdL{ZHA58xB{t?z7G`1TkksN5
z1<$;a)S}$fl+47ERE3g!g_P8s)RI&KIdNV?Qv+ioLqiKg6C<N2ab6Q-u7RGRj)4}$
z9A&UMu6ZfCsd*)tC6x+kMftf3rFq$T`Q>>EnZ?DWsYM2j^O0S`$jZRn*vnwh*vZt`
z$Z&qwSMJ2z1zQUDT)eXAb5ZWWD=hK1cW^gtskS)$fBKRACk<bvJ!X3Q;LQKsDf17e
z9KQZ>@8P2xO}8&z>TSw=XK&7jepa#F8%r|&Jn(p_lkxCc$}6sgHbuQ2U&9&A{I=yj
zYfP6}T@kjsx@cFqNRH;=>kX6N#7+({xm6x1!IL*%`Z^OcBLm~&#tR0GXAK%VfS!^S
zWNB<LsB4mhdII7Hz0``t+=84`z2yAdCKFVt%)I2B(v(!);?ks){M^LMykfnA%)GqJ
zymS;@+NiopfB~nQo1c=3O|gLy8;3R<BP%OABO{BN0Vvv_d;`Wdv5b<E0xNy}oc!d(
zoQ(Y95-STJ&^O=#xn7u&@jnZb0RvjxGXsM<uw&Vu-8zS6zJIgkz=EI$8O)b@<}CWT
z&eUPo^j{OoIpvQ#DBay><uA7Jz@|c}^b##;ts?zBJo-Yf)^`~8UMnu{)HYZ7Cf4H5
z7yl#PRzQQb>fDX?t;cTotIuP*mKDMuoYy&3{_BBF)891oM|G`Kn-E(WIWgPx(1UC1
L4j1g(zbpd)*z*1C

diff --git a/toolkit/devtools/webconsole/test/unit/test_security-info-static-hpkp.js b/toolkit/devtools/webconsole/test/unit/test_security-info-static-hpkp.js
--- a/toolkit/devtools/webconsole/test/unit/test_security-info-static-hpkp.js
+++ b/toolkit/devtools/webconsole/test/unit/test_security-info-static-hpkp.js
@@ -2,16 +2,17 @@
 /* Any copyright is dedicated to the Public Domain.
    http://creativecommons.org/publicdomain/zero/1.0/ */
 "use strict";
 
 // Test that NetworkHelper.parseSecurityInfo correctly detects static hpkp pins
 
 const { devtools } = Components.utils.import("resource://gre/modules/devtools/Loader.jsm", {});
 Components.utils.import("resource://gre/modules/XPCOMUtils.jsm");
+Components.utils.import("resource://gre/modules/Services.jsm");
 
 Object.defineProperty(this, "NetworkHelper", {
   get: function() {
     return devtools.require("devtools/toolkit/webconsole/network-helper");
   },
   configurable: true,
   writeable: false,
   enumerable: true
@@ -37,11 +38,12 @@ const MockSecurityInfo = {
 const MockRequest = {
   QueryInterface: XPCOMUtils.generateQI([Ci.nsIPrivateBrowsingChannel]),
   URI: {
     host: "include-subdomains.pinning.example.com"
   }
 };
 
 function run_test() {
+  Services.prefs.setIntPref("security.cert_pinning.enforcement_level", 1);
   let result = NetworkHelper.parseSecurityInfo(MockSecurityInfo, MockRequest);
   equal(result.hpkp, true, "Static HPKP detected.");
 }
