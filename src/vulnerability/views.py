from django.shortcuts import render_to_response
from django.http import HttpResponse
from vulnerability.models import CVE
from vulnerability.models import INFO
from vulnerability.models import FUNC

import re
from _datetime import datetime
from setuptools.command.build_ext import if_dl
def display_meta(req):
    return render_to_response('add_vuln.html')
# Create your views here.
def index(req):
    return render_to_response('index.html')

def vulnerability(req):
    vulnerabilities = CVE.objects.all()
    return render_to_response('overview.html', {'vulnerabilities':vulnerabilities})

def search(req):
    return render_to_response('search.html')
    
def importBatch(req):
    return render_to_response('importBatch.html')

def login(req):
    return render_to_response('login.html')

def registration(req):
    return render_to_response('registration.html')    

def forum(req):
    return render_to_response('forum.html')

def detail_vul(req):
    errors = []
    if 'q' in req.GET:
        q = req.GET['q']
        if not validCVE(q):
            errors.append('Enter a search term.')
        else:
            if not re.match('^CVE-', q):
                q = 'CVE-' + q
            query = q
            try:
                cves = CVE.objects.filter(cve_id=query)
            except:
                errors.append("No Term Found")
                return render_to_response('search.html', {'errors': errors})
            try:
                infos = INFO.objects.filter(cve=cves)
            except:
                errors.append("No INFO Found")
            try:
                files = []
                funcs = []
                
                for info in infos:
                    funcs.append(info.func_set.all())
                  #  func = FUNC.objects.filter(info_id=info)
                   # for fun1 in func:
                    #    file = fun1.vuln_file
                     #   if file in files:
                     #       continue                        
                      #  func = ""
                       # for fun2 in func:
                       #     if fun2.vuln_file == file:
                        #        if len(func) > 0:
                        #            func += ("," + fun2.vuln_func)
                        #        else:
                         #           func += fun2.vuln_func
                      #  file += ";"
                      #  func += ";"
                  #  files.append(file)
                  #  funcs.append(func)
            except:
                 errors.append("No FUNC Found")
                 
            return render_to_response('detail_vul.html',
                {'query':query, 'cves':cves, 'infos':infos, 'files':files, 'funcs':funcs})
    return render_to_response('search_result.html', {'errors': errors})

def validCVE(cveid):
    patt = '^(CVE-)?[0-9]{4}-[0-9]{1,39}$'
    m = re.match(patt, cveid)
    if not m:
        return False
    return True

def search_cve(request):
    errors = []
    vulnRes = []
    query = []
    q = request.GET['q']
    if not q:
        errors.append('Enter a search term.')
    elif not validCVE(q):
        errors.append('Incorrect CVE ID, expected format: CVE-[0-9]{4}-[0-9]{1,39} or [0-9]{4}-[0-9]{1,39}')
    else:            
        query.append(q)
        try:
           
            return render_to_response('search_results.html')
        except:
            errors.append("ERROR")
    return render_to_response('search_results.html', {'errors': errors})      

def search_vul(req):
    if 'q' in req.GET:  # search 
        return search_cve(req)
   # elif 'ad_q' in req.GET:  # advanced search
      #  return search_advanced(req)
    # elif 'Analysis' in req.GET:  # analysis
    #    return analysis(request)
    else:
        return render_to_response('404.html') 

def search_advanced_vul(req):
    return render_to_response('search_advanced.html')

def add_Save(req):
    curtime = datetime.now()
    errors = []
    if req.method == 'GET':  
        print("GET")  
        cve_id = req.GET['cve_id']
        cwe_id = req.GET['cwe_id']
        vuln_type = req.GET['vuln_type']
        cvss_id = req.GET['cvss_id']
        description = req.GET['description']
        user = req.GET['user']
        cveResult = CVE.objects.filter(cve_id=cve_id)
        if len(cveResult) > 0:
            errors.append("cve exists")
            return render_to_response('add_success.html', {'errors':errors})
        cve = CVE()
        cve.cve_id = cve_id
        cve.cwe_id = cwe_id
        cve.vuln_type = vuln_type
        cve.cvss_id = cvss_id
        cve.description = description
        cve.user = user
        cve.update_date = curtime
        cve.save()
    return render_to_response('add_success.html', {'errors':errors})
    
def addVulnerability(req):
    if '_save' in req.GET: 
        return add_Save(req)
    else:
         return render_to_response('add_vuln.html')
     
def editVulnerability(req):
    if 'q' in req.GET:
        q = req.GET['q']
        vulnerability = CVE.objects.get(cve_id=q)
        return render_to_response('edit_vuln.html', {'vulnerability':vulnerability})
    elif '_update' in req.GET:
        cve_id=req.GET['cve_id']
        vulnerability = CVE.objects.get(cve_id=cve_id)
        vulnerability.cve_id=req.GET['cve_id']
        vulnerability.cwe_id = req.GET['cwe_id']
        vulnerability.vuln_type = req.GET['vuln_type']
        vulnerability.cvss_id = req.GET['cvss_id']
        vulnerability.description = req.GET['description']
        vulnerability.user = req.GET['user']
        vulnerability.save()
        return render_to_response("success.html")
    else:
        return render_to_response('edit_vuln.html')
