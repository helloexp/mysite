from django.db import models
from django.db.models.fields.related import ForeignKey

# Create your models here.    
class CVE(models.Model):
    cve_id = models.CharField(max_length=20, primary_key=True, db_column='CVEID')
    cwe_id = models.CharField(max_length=20, db_column='CWEID', blank=True)
    vuln_type = models.FloatField(db_column='TYPE', blank=True)
    cvss_id = models.FloatField(db_column='CVSS')
    description = models.TextField(db_column='Description')
    user = models.CharField(max_length=20, db_column='User')
    update_date = models.DateField(blank=True, null=True)
    
    def __str__(self):
        return self.cve_id
    class Meta:
        db_table = 'vulnerability_cve'
    
class INFO(models.Model):
    id = models.AutoField('ID', primary_key=True)
    cve = ForeignKey(CVE, related_name='cve')
    softeware = models.TextField(db_column='Software')
    software_version = models.TextField(db_column='SoftwareVersion')
    patch_file = models.CharField(max_length=255, db_column='Patch_File')
    patch_func = models.TextField(db_column='Patch_Func', blank=True)
    contain_version = models.TextField(db_column='Contain_Version', blank=True)
    version_used = models.CharField(max_length=20, blank=True, db_column='Version_Used')
    error_version = models.TextField(db_column='Error_Version', blank=True)
    reuse_version = models.TextField(db_column='Reuse_Version', blank=True)
    diff_link = models.TextField(db_column='Diff_Link')
    diff_file = models.CharField(max_length=50, db_column='Diff_File')
    check_flag = models.BooleanField(db_column='Check_Flag', default=False)
    def __str__(self):
        return self.cve.__str__() + '-' + self.softeware
    class Meta:
        db_table = 'vulnerability_info'
    
class FUNC(models.Model):
    info_id = models.ForeignKey(INFO, related_name='info') 
    vuln_file = models.CharField(max_length=255, db_column='Vuln_File')   
    vuln_func = models.CharField(max_length=63, db_column='Vuln_Func')        
    func_code = models.CharField(max_length=20, db_column='Func_Code', null=True)
    
    class Meta:
        db_table = 'vulnerability_func'
        unique_together = ("id", "vuln_func", "vuln_file")
        
    def __str__(self):
        return self.info_id.__str__() + " : " + self.vuln_file+" : "+self.vuln_func
    
